circuit CoreId :
  module CoreId :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip If : { flip IdReady : UInt<1>, IfInstr : UInt<32>}, Exe : { AluOp : UInt<10>, Data1 : UInt<32>, Data2 : UInt<32>, MmuEn : UInt<1>, MmuWen : UInt<1>, MmuOp : UInt<5>, MmuRData2 : UInt<32>, Rd : UInt<5>, flip ExeReady : UInt<1>}, flip RegFile : { flip Rs1 : UInt<5>, flip Rs2 : UInt<5>, flip Rd : UInt<5>, RData1 : UInt<32>, RData2 : UInt<32>, RValid : UInt<1>}}

    reg alu_op : UInt<10>, clock with :
      reset => (reset, UInt<10>("h0")) @[Core_id.scala 29:24]
    reg data1 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core_id.scala 30:24]
    reg data2 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core_id.scala 31:24]
    reg mmu_en : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core_id.scala 32:24]
    reg mmu_wen : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core_id.scala 33:24]
    reg mmu_op : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[Core_id.scala 34:24]
    reg mmu_RData2 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core_id.scala 35:24]
    reg rd_r : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[Core_id.scala 36:24]
    node opcode = bits(io.If.IfInstr, 6, 0) @[Core_id.scala 46:21]
    node rd = bits(io.If.IfInstr, 11, 7) @[Core_id.scala 47:21]
    node fuct3 = bits(io.If.IfInstr, 14, 12) @[Core_id.scala 48:21]
    node rs1 = bits(io.If.IfInstr, 19, 15) @[Core_id.scala 49:21]
    node rs2 = bits(io.If.IfInstr, 24, 20) @[Core_id.scala 50:21]
    node fuct7 = bits(io.If.IfInstr, 31, 25) @[Core_id.scala 51:21]
    node R_op = eq(opcode, UInt<6>("h33")) @[Core_id.scala 53:19]
    node I_op = eq(opcode, UInt<5>("h13")) @[Core_id.scala 54:19]
    node S_op = eq(opcode, UInt<6>("h23")) @[Core_id.scala 55:19]
    node L_op = eq(opcode, UInt<2>("h3")) @[Core_id.scala 56:19]
    node B_op = eq(opcode, UInt<7>("h63")) @[Core_id.scala 57:19]
    node J_type = eq(opcode, UInt<7>("h6f")) @[Core_id.scala 59:21]
    node lui = eq(opcode, UInt<6>("h37")) @[Core_id.scala 60:21]
    node auipc = eq(opcode, UInt<5>("h17")) @[Core_id.scala 61:21]
    node jalr = eq(opcode, UInt<7>("h67")) @[Core_id.scala 62:21]
    node _I_type_T = or(I_op, L_op) @[Core_id.scala 65:18]
    node I_type = or(_I_type_T, jalr) @[Core_id.scala 65:24]
    node U_type = or(lui, auipc) @[Core_id.scala 68:18]
    node _imm_T = bits(io.If.IfInstr, 31, 31) @[Core_id.scala 71:44]
    node _imm_T_1 = bits(_imm_T, 0, 0) @[Bitwise.scala 74:15]
    node _imm_T_2 = mux(_imm_T_1, UInt<20>("hfffff"), UInt<20>("h0")) @[Bitwise.scala 74:12]
    node _imm_T_3 = bits(io.If.IfInstr, 31, 20) @[Core_id.scala 71:57]
    node _imm_T_4 = cat(_imm_T_2, _imm_T_3) @[Cat.scala 31:58]
    node _imm_T_5 = bits(io.If.IfInstr, 31, 31) @[Core_id.scala 72:44]
    node _imm_T_6 = bits(_imm_T_5, 0, 0) @[Bitwise.scala 74:15]
    node _imm_T_7 = mux(_imm_T_6, UInt<20>("hfffff"), UInt<20>("h0")) @[Bitwise.scala 74:12]
    node _imm_T_8 = bits(io.If.IfInstr, 31, 25) @[Core_id.scala 72:61]
    node _imm_T_9 = bits(io.If.IfInstr, 11, 7) @[Core_id.scala 72:76]
    node _imm_T_10 = cat(_imm_T_8, _imm_T_9) @[Cat.scala 31:58]
    node _imm_T_11 = cat(_imm_T_7, _imm_T_10) @[Cat.scala 31:58]
    node _imm_T_12 = bits(io.If.IfInstr, 31, 31) @[Core_id.scala 73:44]
    node _imm_T_13 = bits(_imm_T_12, 0, 0) @[Bitwise.scala 74:15]
    node _imm_T_14 = mux(_imm_T_13, UInt<19>("h7ffff"), UInt<19>("h0")) @[Bitwise.scala 74:12]
    node _imm_T_15 = bits(io.If.IfInstr, 31, 31) @[Core_id.scala 73:70]
    node _imm_T_16 = bits(io.If.IfInstr, 7, 7) @[Core_id.scala 73:82]
    node _imm_T_17 = cat(_imm_T_15, _imm_T_16) @[Cat.scala 31:58]
    node _imm_T_18 = bits(io.If.IfInstr, 30, 25) @[Core_id.scala 73:100]
    node _imm_T_19 = bits(io.If.IfInstr, 11, 8) @[Core_id.scala 73:115]
    node _imm_T_20 = cat(_imm_T_18, _imm_T_19) @[Cat.scala 31:58]
    node _imm_T_21 = cat(_imm_T_17, _imm_T_20) @[Cat.scala 31:58]
    node _imm_T_22 = cat(_imm_T_21, UInt<1>("h0")) @[Cat.scala 31:58]
    node _imm_T_23 = cat(_imm_T_14, _imm_T_22) @[Cat.scala 31:58]
    node _imm_T_24 = bits(io.If.IfInstr, 31, 12) @[Core_id.scala 74:36]
    node _imm_T_25 = cat(_imm_T_24, UInt<12>("h0")) @[Cat.scala 31:58]
    node _imm_T_26 = bits(io.If.IfInstr, 31, 31) @[Core_id.scala 75:49]
    node _imm_T_27 = bits(_imm_T_26, 0, 0) @[Bitwise.scala 74:15]
    node _imm_T_28 = mux(_imm_T_27, UInt<11>("h7ff"), UInt<11>("h0")) @[Bitwise.scala 74:12]
    node _imm_T_29 = bits(io.If.IfInstr, 31, 31) @[Core_id.scala 75:66]
    node _imm_T_30 = bits(io.If.IfInstr, 19, 12) @[Core_id.scala 75:78]
    node _imm_T_31 = cat(_imm_T_29, _imm_T_30) @[Cat.scala 31:58]
    node _imm_T_32 = cat(_imm_T_28, _imm_T_31) @[Cat.scala 31:58]
    node _imm_T_33 = bits(io.If.IfInstr, 20, 20) @[Core_id.scala 75:105]
    node _imm_T_34 = bits(io.If.IfInstr, 30, 21) @[Core_id.scala 75:117]
    node _imm_T_35 = cat(_imm_T_33, _imm_T_34) @[Cat.scala 31:58]
    node _imm_T_36 = cat(_imm_T_35, UInt<1>("h0")) @[Cat.scala 31:58]
    node _imm_T_37 = cat(_imm_T_32, _imm_T_36) @[Cat.scala 31:58]
    node _imm_T_38 = mux(J_type, _imm_T_37, UInt<32>("h0")) @[Core_id.scala 75:17]
    node _imm_T_39 = mux(U_type, _imm_T_25, _imm_T_38) @[Core_id.scala 74:17]
    node _imm_T_40 = mux(B_op, _imm_T_23, _imm_T_39) @[Core_id.scala 73:17]
    node _imm_T_41 = mux(S_op, _imm_T_11, _imm_T_40) @[Core_id.scala 72:17]
    node imm = mux(I_type, _imm_T_4, _imm_T_41) @[Core_id.scala 71:17]
    node _add_T = eq(fuct3, UInt<1>("h0")) @[Core_id.scala 81:36]
    node _add_T_1 = and(R_op, _add_T) @[Core_id.scala 81:27]
    node _add_T_2 = eq(fuct7, UInt<1>("h0")) @[Core_id.scala 81:56]
    node _add_T_3 = and(_add_T_1, _add_T_2) @[Core_id.scala 81:47]
    node _add_T_4 = eq(fuct3, UInt<1>("h0")) @[Core_id.scala 81:84]
    node _add_T_5 = and(I_op, _add_T_4) @[Core_id.scala 81:75]
    node _add_T_6 = or(_add_T_3, _add_T_5) @[Core_id.scala 81:66]
    node _add_T_7 = or(_add_T_6, L_op) @[Core_id.scala 81:93]
    node _add_T_8 = or(_add_T_7, S_op) @[Core_id.scala 81:99]
    node add = mux(_add_T_8, UInt<1>("h1"), UInt<1>("h0")) @[Core_id.scala 81:20]
    node _sub_T = eq(fuct3, UInt<1>("h0")) @[Core_id.scala 82:36]
    node _sub_T_1 = and(R_op, _sub_T) @[Core_id.scala 82:27]
    node _sub_T_2 = eq(fuct7, UInt<6>("h20")) @[Core_id.scala 82:56]
    node _sub_T_3 = and(_sub_T_1, _sub_T_2) @[Core_id.scala 82:47]
    node sub = mux(_sub_T_3, UInt<1>("h1"), UInt<1>("h0")) @[Core_id.scala 82:20]
    node _slt_T = eq(fuct3, UInt<2>("h2")) @[Core_id.scala 83:36]
    node _slt_T_1 = and(R_op, _slt_T) @[Core_id.scala 83:27]
    node _slt_T_2 = eq(fuct7, UInt<1>("h0")) @[Core_id.scala 83:56]
    node _slt_T_3 = and(_slt_T_1, _slt_T_2) @[Core_id.scala 83:47]
    node _slt_T_4 = eq(fuct3, UInt<2>("h2")) @[Core_id.scala 83:83]
    node _slt_T_5 = and(I_op, _slt_T_4) @[Core_id.scala 83:74]
    node _slt_T_6 = or(_slt_T_3, _slt_T_5) @[Core_id.scala 83:65]
    node slt = mux(_slt_T_6, UInt<1>("h1"), UInt<1>("h0")) @[Core_id.scala 83:20]
    node _sltu_T = eq(fuct3, UInt<2>("h3")) @[Core_id.scala 84:36]
    node _sltu_T_1 = and(R_op, _sltu_T) @[Core_id.scala 84:27]
    node _sltu_T_2 = eq(fuct7, UInt<1>("h0")) @[Core_id.scala 84:56]
    node _sltu_T_3 = and(_sltu_T_1, _sltu_T_2) @[Core_id.scala 84:47]
    node _sltu_T_4 = eq(fuct3, UInt<2>("h3")) @[Core_id.scala 84:83]
    node _sltu_T_5 = and(I_op, _sltu_T_4) @[Core_id.scala 84:74]
    node _sltu_T_6 = or(_sltu_T_3, _sltu_T_5) @[Core_id.scala 84:65]
    node sltu = mux(_sltu_T_6, UInt<1>("h1"), UInt<1>("h0")) @[Core_id.scala 84:20]
    node _and_T = eq(fuct3, UInt<3>("h7")) @[Core_id.scala 85:36]
    node _and_T_1 = and(R_op, _and_T) @[Core_id.scala 85:27]
    node _and_T_2 = eq(fuct7, UInt<1>("h0")) @[Core_id.scala 85:56]
    node _and_T_3 = and(_and_T_1, _and_T_2) @[Core_id.scala 85:47]
    node _and_T_4 = eq(fuct3, UInt<3>("h7")) @[Core_id.scala 85:83]
    node _and_T_5 = and(I_op, _and_T_4) @[Core_id.scala 85:74]
    node _and_T_6 = or(_and_T_3, _and_T_5) @[Core_id.scala 85:65]
    node and = mux(_and_T_6, UInt<1>("h1"), UInt<1>("h0")) @[Core_id.scala 85:20]
    node _or_T = eq(fuct3, UInt<3>("h6")) @[Core_id.scala 86:36]
    node _or_T_1 = and(R_op, _or_T) @[Core_id.scala 86:27]
    node _or_T_2 = eq(fuct7, UInt<1>("h0")) @[Core_id.scala 86:56]
    node _or_T_3 = and(_or_T_1, _or_T_2) @[Core_id.scala 86:47]
    node _or_T_4 = eq(fuct3, UInt<3>("h6")) @[Core_id.scala 86:84]
    node _or_T_5 = and(I_op, _or_T_4) @[Core_id.scala 86:75]
    node _or_T_6 = or(_or_T_3, _or_T_5) @[Core_id.scala 86:66]
    node or = mux(_or_T_6, UInt<1>("h1"), UInt<1>("h0")) @[Core_id.scala 86:20]
    node _xor_T = eq(fuct3, UInt<3>("h4")) @[Core_id.scala 87:36]
    node _xor_T_1 = and(R_op, _xor_T) @[Core_id.scala 87:27]
    node _xor_T_2 = eq(fuct7, UInt<1>("h0")) @[Core_id.scala 87:56]
    node _xor_T_3 = and(_xor_T_1, _xor_T_2) @[Core_id.scala 87:47]
    node _xor_T_4 = eq(fuct3, UInt<3>("h4")) @[Core_id.scala 87:83]
    node _xor_T_5 = and(I_op, _xor_T_4) @[Core_id.scala 87:74]
    node _xor_T_6 = or(_xor_T_3, _xor_T_5) @[Core_id.scala 87:65]
    node xor = mux(_xor_T_6, UInt<1>("h1"), UInt<1>("h0")) @[Core_id.scala 87:20]
    node _sll_T = eq(fuct3, UInt<1>("h1")) @[Core_id.scala 88:36]
    node _sll_T_1 = and(R_op, _sll_T) @[Core_id.scala 88:27]
    node _sll_T_2 = eq(fuct7, UInt<1>("h0")) @[Core_id.scala 88:56]
    node _sll_T_3 = and(_sll_T_1, _sll_T_2) @[Core_id.scala 88:47]
    node _sll_T_4 = eq(fuct3, UInt<1>("h1")) @[Core_id.scala 88:83]
    node _sll_T_5 = and(I_op, _sll_T_4) @[Core_id.scala 88:74]
    node _sll_T_6 = eq(fuct7, UInt<1>("h0")) @[Core_id.scala 88:103]
    node _sll_T_7 = and(_sll_T_5, _sll_T_6) @[Core_id.scala 88:94]
    node _sll_T_8 = or(_sll_T_3, _sll_T_7) @[Core_id.scala 88:65]
    node sll = mux(_sll_T_8, UInt<1>("h1"), UInt<1>("h0")) @[Core_id.scala 88:20]
    node _srl_T = eq(fuct3, UInt<3>("h5")) @[Core_id.scala 89:36]
    node _srl_T_1 = and(R_op, _srl_T) @[Core_id.scala 89:27]
    node _srl_T_2 = eq(fuct7, UInt<1>("h0")) @[Core_id.scala 89:56]
    node _srl_T_3 = and(_srl_T_1, _srl_T_2) @[Core_id.scala 89:47]
    node _srl_T_4 = eq(fuct3, UInt<3>("h5")) @[Core_id.scala 89:83]
    node _srl_T_5 = and(I_op, _srl_T_4) @[Core_id.scala 89:74]
    node _srl_T_6 = eq(fuct7, UInt<1>("h0")) @[Core_id.scala 89:103]
    node _srl_T_7 = and(_srl_T_5, _srl_T_6) @[Core_id.scala 89:94]
    node _srl_T_8 = or(_srl_T_3, _srl_T_7) @[Core_id.scala 89:65]
    node srl = mux(_srl_T_8, UInt<1>("h1"), UInt<1>("h0")) @[Core_id.scala 89:20]
    node _sra_T = eq(fuct3, UInt<3>("h5")) @[Core_id.scala 90:36]
    node _sra_T_1 = and(R_op, _sra_T) @[Core_id.scala 90:27]
    node _sra_T_2 = eq(fuct7, UInt<6>("h20")) @[Core_id.scala 90:56]
    node _sra_T_3 = and(_sra_T_1, _sra_T_2) @[Core_id.scala 90:47]
    node _sra_T_4 = eq(fuct3, UInt<3>("h5")) @[Core_id.scala 90:87]
    node _sra_T_5 = and(I_op, _sra_T_4) @[Core_id.scala 90:78]
    node _sra_T_6 = eq(fuct7, UInt<6>("h20")) @[Core_id.scala 90:107]
    node _sra_T_7 = and(_sra_T_5, _sra_T_6) @[Core_id.scala 90:98]
    node _sra_T_8 = or(_sra_T_3, _sra_T_7) @[Core_id.scala 90:69]
    node sra = mux(_sra_T_8, UInt<1>("h1"), UInt<1>("h0")) @[Core_id.scala 90:20]
    node ByteS = eq(fuct3, UInt<1>("h0")) @[Core_id.scala 93:23]
    node HalfS = eq(fuct3, UInt<1>("h1")) @[Core_id.scala 94:23]
    node WordS = eq(fuct3, UInt<2>("h2")) @[Core_id.scala 95:23]
    node ByteU = eq(fuct3, UInt<3>("h4")) @[Core_id.scala 96:23]
    node HalfU = eq(fuct3, UInt<3>("h5")) @[Core_id.scala 97:23]
    node _io_If_IdReady_T = and(io.Exe.ExeReady, io.RegFile.RValid) @[Core_id.scala 99:26]
    io.If.IdReady <= _io_If_IdReady_T @[Core_id.scala 99:14]
    node _io_RegFile_Rs1_T = or(R_op, I_type) @[Core_id.scala 101:27]
    node _io_RegFile_Rs1_T_1 = or(_io_RegFile_Rs1_T, S_op) @[Core_id.scala 101:35]
    node _io_RegFile_Rs1_T_2 = or(_io_RegFile_Rs1_T_1, B_op) @[Core_id.scala 101:43]
    node _io_RegFile_Rs1_T_3 = mux(_io_RegFile_Rs1_T_2, rs1, UInt<1>("h0")) @[Core_id.scala 101:20]
    io.RegFile.Rs1 <= _io_RegFile_Rs1_T_3 @[Core_id.scala 101:15]
    node _io_RegFile_Rs2_T = or(R_op, S_op) @[Core_id.scala 102:27]
    node _io_RegFile_Rs2_T_1 = or(_io_RegFile_Rs2_T, B_op) @[Core_id.scala 102:35]
    node _io_RegFile_Rs2_T_2 = mux(_io_RegFile_Rs2_T_1, rs2, UInt<1>("h0")) @[Core_id.scala 102:20]
    io.RegFile.Rs2 <= _io_RegFile_Rs2_T_2 @[Core_id.scala 102:15]
    node _io_RegFile_Rd_T = or(R_op, I_type) @[Core_id.scala 103:27]
    node _io_RegFile_Rd_T_1 = or(_io_RegFile_Rd_T, U_type) @[Core_id.scala 103:35]
    node _io_RegFile_Rd_T_2 = or(_io_RegFile_Rd_T_1, J_type) @[Core_id.scala 103:43]
    node _io_RegFile_Rd_T_3 = mux(_io_RegFile_Rd_T_2, rd, UInt<1>("h0")) @[Core_id.scala 103:20]
    io.RegFile.Rd <= _io_RegFile_Rd_T_3 @[Core_id.scala 103:15]
    io.Exe.AluOp <= alu_op @[Core_id.scala 105:18]
    io.Exe.Data1 <= data1 @[Core_id.scala 106:18]
    io.Exe.Data2 <= data2 @[Core_id.scala 107:18]
    io.Exe.MmuEn <= mmu_en @[Core_id.scala 108:18]
    io.Exe.MmuWen <= mmu_wen @[Core_id.scala 109:18]
    io.Exe.MmuOp <= mmu_op @[Core_id.scala 110:18]
    io.Exe.MmuRData2 <= mmu_RData2 @[Core_id.scala 111:18]
    io.Exe.Rd <= rd_r @[Core_id.scala 112:18]
    node _T = and(io.Exe.ExeReady, io.RegFile.RValid) @[Core_id.scala 116:15]
    when _T : @[Core_id.scala 116:24]
      node _alu_op_T = cat(sra, srl) @[Cat.scala 31:58]
      node _alu_op_T_1 = cat(_alu_op_T, sll) @[Cat.scala 31:58]
      node _alu_op_T_2 = cat(_alu_op_T_1, xor) @[Cat.scala 31:58]
      node _alu_op_T_3 = cat(_alu_op_T_2, or) @[Cat.scala 31:58]
      node _alu_op_T_4 = cat(_alu_op_T_3, and) @[Cat.scala 31:58]
      node _alu_op_T_5 = cat(_alu_op_T_4, sltu) @[Cat.scala 31:58]
      node _alu_op_T_6 = cat(_alu_op_T_5, slt) @[Cat.scala 31:58]
      node _alu_op_T_7 = cat(_alu_op_T_6, sub) @[Cat.scala 31:58]
      node _alu_op_T_8 = cat(_alu_op_T_7, add) @[Cat.scala 31:58]
      alu_op <= _alu_op_T_8 @[Core_id.scala 117:15]
      data1 <= io.RegFile.RData1 @[Core_id.scala 118:15]
      node _data2_T = mux(R_op, io.RegFile.RData2, imm) @[Core_id.scala 119:22]
      data2 <= _data2_T @[Core_id.scala 119:15]
      node _mmu_en_T = or(L_op, S_op) @[Core_id.scala 120:24]
      mmu_en <= _mmu_en_T @[Core_id.scala 120:15]
      mmu_wen <= S_op @[Core_id.scala 121:15]
      node _mmu_op_T = cat(HalfU, ByteU) @[Cat.scala 31:58]
      node _mmu_op_T_1 = cat(_mmu_op_T, WordS) @[Cat.scala 31:58]
      node _mmu_op_T_2 = cat(_mmu_op_T_1, HalfS) @[Cat.scala 31:58]
      node _mmu_op_T_3 = cat(_mmu_op_T_2, ByteS) @[Cat.scala 31:58]
      mmu_op <= _mmu_op_T_3 @[Core_id.scala 122:15]
      node _mmu_RData2_T = mux(S_op, io.RegFile.RData2, UInt<32>("h0")) @[Core_id.scala 123:22]
      mmu_RData2 <= _mmu_RData2_T @[Core_id.scala 123:15]
      rd_r <= io.RegFile.Rd @[Core_id.scala 124:15]
    else :
      alu_op <= alu_op @[Core_id.scala 127:14]
      data1 <= data1 @[Core_id.scala 128:14]
      data2 <= data2 @[Core_id.scala 129:14]
      mmu_en <= mmu_en @[Core_id.scala 130:14]
      mmu_wen <= mmu_wen @[Core_id.scala 131:14]
      mmu_RData2 <= mmu_RData2 @[Core_id.scala 132:15]
      rd_r <= rd_r @[Core_id.scala 133:14]

