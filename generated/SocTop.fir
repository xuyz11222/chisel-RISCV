circuit SocTop :
  module CorePreIf :
    input clock : Clock
    input reset : Reset
    output io : { Instr : { inst_sram_en : UInt<1>, inst_sram_wen : UInt<4>, inst_sram_addr : UInt<32>, inst_sram_wdata : UInt<32>}, If : { flip IfReady : UInt<1>, Pc : UInt<32>}, flip Exe : { PcJump : UInt<1>, NextPc : UInt<32>}}

    reg Pc : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Pre_if.scala 31:25]
    when io.Exe.PcJump : @[Pre_if.scala 35:14]
      Pc <= io.Exe.NextPc @[Pre_if.scala 36:7]
    else :
      when io.If.IfReady : @[Pre_if.scala 37:23]
        node _Pc_T = add(Pc, UInt<3>("h4")) @[Pre_if.scala 38:12]
        node _Pc_T_1 = tail(_Pc_T, 1) @[Pre_if.scala 38:12]
        Pc <= _Pc_T_1 @[Pre_if.scala 38:7]
      else :
        Pc <= Pc @[Pre_if.scala 40:7]
    io.Instr.inst_sram_en <= io.If.IfReady @[Pre_if.scala 43:29]
    io.Instr.inst_sram_wen <= UInt<4>("h0") @[Pre_if.scala 44:29]
    io.Instr.inst_sram_addr <= Pc @[Pre_if.scala 45:29]
    io.Instr.inst_sram_wdata <= UInt<1>("h0") @[Pre_if.scala 46:29]
    io.If.Pc <= Pc @[Pre_if.scala 47:29]

  module CoreIf :
    input clock : Clock
    input reset : Reset
    output io : { Instr : { flip inst_sram_rdata : UInt<32>}, Id : { flip IdReady : UInt<1>, IfInstr : UInt<32>, Pc : UInt<32>, IfValid : UInt<1>}, flip PreIf : { flip IfReady : UInt<1>, Pc : UInt<32>}, flip Exe : { PcJump : UInt<1>}, DebugInstr : UInt<32>, DebugPc : UInt<32>, DebugIfValid : UInt<1>, DebugIfEn : UInt<1>}

    reg Instr : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core_if.scala 35:24]
    reg Pc : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core_if.scala 36:24]
    reg IfValid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core_if.scala 37:24]
    node _IfEn_T = eq(IfValid, UInt<1>("h0")) @[Core_if.scala 38:26]
    node IfEn = or(io.Id.IdReady, _IfEn_T) @[Core_if.scala 38:23]
    when io.Exe.PcJump : @[Core_if.scala 40:23]
      Instr <= UInt<32>("h0") @[Core_if.scala 41:10]
      Pc <= UInt<32>("h0") @[Core_if.scala 42:10]
      IfValid <= UInt<1>("h0") @[Core_if.scala 43:13]
    else :
      when IfEn : @[Core_if.scala 44:20]
        Instr <= io.Instr.inst_sram_rdata @[Core_if.scala 45:10]
        Pc <= io.PreIf.Pc @[Core_if.scala 46:10]
        IfValid <= UInt<1>("h1") @[Core_if.scala 47:13]
      else :
        Instr <= Instr @[Core_if.scala 49:13]
        Pc <= Pc @[Core_if.scala 50:13]
        IfValid <= IfValid @[Core_if.scala 51:13]
    io.PreIf.IfReady <= IfEn @[Core_if.scala 54:21]
    io.Id.IfInstr <= Instr @[Core_if.scala 55:21]
    io.Id.Pc <= Pc @[Core_if.scala 56:21]
    io.Id.IfValid <= IfValid @[Core_if.scala 57:21]
    io.DebugInstr <= Instr @[Core_if.scala 58:20]
    io.DebugPc <= Pc @[Core_if.scala 59:20]
    io.DebugIfValid <= IfValid @[Core_if.scala 60:20]
    io.DebugIfEn <= IfEn @[Core_if.scala 61:20]

  module CoreId :
    input clock : Clock
    input reset : Reset
    output io : { flip If : { flip IdReady : UInt<1>, IfInstr : UInt<32>, Pc : UInt<32>, IfValid : UInt<1>}, Exe : { AluOp : UInt<10>, Data1 : UInt<32>, Data2 : UInt<32>, MmuEn : UInt<1>, MmuWen : UInt<1>, MmuOp : UInt<5>, MmuRData2 : UInt<32>, PcuEn : UInt<1>, PcuOp : UInt<8>, PcuData1 : UInt<32>, PcuData2 : UInt<32>, Rd : UInt<5>, flip ExeReady : UInt<1>, flip PcJump : UInt<1>, CsrEn : UInt<1>, CsrOp : UInt<3>, CsrWAddr : UInt<12>, CsrData : UInt<32>, CsrImm : UInt<32>, IdValid : UInt<1>}, flip RegFile : { flip Rs1 : UInt<5>, flip Rs2 : UInt<5>, flip Rd : UInt<5>, RData1 : UInt<32>, RData2 : UInt<32>, RValid : UInt<1>}, flip CsrReg : { flip CsrAddr : UInt<12>, CsrData : UInt<32>}, Debug_alu_op : UInt<10>, Debug_data1 : UInt<32>, Debug_data2 : UInt<32>, Debug_mmu_en : UInt<1>, Debug_mmu_wen : UInt<1>, Debug_mmu_op : UInt<5>, Debug_mmu_RData2 : UInt<32>, Debug_pcu_en : UInt<1>, Debug_pcu_op : UInt<8>, Debug_pcu_data1 : UInt<32>, Debug_pcu_data2 : UInt<32>, Debug_rd_r : UInt<5>, Debug_csr_en : UInt<1>, Debug_csr_op : UInt<3>, Debug_csr_waddr : UInt<12>, Debug_csr_data : UInt<32>, Debug_csr_imm : UInt<32>, Debug_IdValid : UInt<1>}

    reg alu_op : UInt<10>, clock with :
      reset => (reset, UInt<10>("h0")) @[Core_id.scala 61:24]
    reg data1 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core_id.scala 62:24]
    reg data2 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core_id.scala 63:24]
    reg mmu_en : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core_id.scala 64:24]
    reg mmu_wen : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core_id.scala 65:24]
    reg mmu_op : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[Core_id.scala 66:24]
    reg mmu_RData2 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core_id.scala 67:24]
    reg pcu_en : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core_id.scala 68:24]
    reg pcu_op : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[Core_id.scala 69:24]
    reg pcu_data1 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core_id.scala 70:24]
    reg pcu_data2 : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core_id.scala 71:24]
    reg rd_r : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[Core_id.scala 72:24]
    reg csr_en : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core_id.scala 73:24]
    reg csr_op : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Core_id.scala 74:24]
    reg csr_waddr : UInt<12>, clock with :
      reset => (reset, UInt<12>("h0")) @[Core_id.scala 75:24]
    reg csr_data : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core_id.scala 76:24]
    reg csr_imm : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core_id.scala 77:24]
    reg IdValid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core_id.scala 78:24]
    node _IdEn_T = eq(IdValid, UInt<1>("h0")) @[Core_id.scala 93:29]
    node _IdEn_T_1 = or(io.Exe.ExeReady, _IdEn_T) @[Core_id.scala 93:26]
    node _IdEn_T_2 = and(_IdEn_T_1, io.RegFile.RValid) @[Core_id.scala 93:40]
    node IdEn = and(_IdEn_T_2, io.If.IfValid) @[Core_id.scala 93:50]
    node _CsrData_T = eq(io.CsrReg.CsrAddr, csr_waddr) @[Core_id.scala 96:39]
    node CsrData = mux(_CsrData_T, csr_imm, io.CsrReg.CsrData) @[Core_id.scala 96:20]
    node opcode = bits(io.If.IfInstr, 6, 0) @[Core_id.scala 98:21]
    node rd = bits(io.If.IfInstr, 11, 7) @[Core_id.scala 99:21]
    node fuct3 = bits(io.If.IfInstr, 14, 12) @[Core_id.scala 100:21]
    node rs1 = bits(io.If.IfInstr, 19, 15) @[Core_id.scala 101:21]
    node rs2 = bits(io.If.IfInstr, 24, 20) @[Core_id.scala 102:21]
    node fuct7 = bits(io.If.IfInstr, 31, 25) @[Core_id.scala 103:21]
    node R_op = eq(opcode, UInt<6>("h33")) @[Core_id.scala 105:19]
    node I_op = eq(opcode, UInt<5>("h13")) @[Core_id.scala 106:19]
    node S_op = eq(opcode, UInt<6>("h23")) @[Core_id.scala 107:19]
    node L_op = eq(opcode, UInt<2>("h3")) @[Core_id.scala 108:19]
    node B_op = eq(opcode, UInt<7>("h63")) @[Core_id.scala 109:19]
    node J_type = eq(opcode, UInt<7>("h6f")) @[Core_id.scala 111:21]
    node lui = eq(opcode, UInt<6>("h37")) @[Core_id.scala 112:21]
    node auipc = eq(opcode, UInt<5>("h17")) @[Core_id.scala 113:21]
    node jalr = eq(opcode, UInt<7>("h67")) @[Core_id.scala 114:21]
    node _I_type_T = or(I_op, L_op) @[Core_id.scala 117:18]
    node I_type = or(_I_type_T, jalr) @[Core_id.scala 117:24]
    node U_type = or(lui, auipc) @[Core_id.scala 120:18]
    node csr_opcode = eq(opcode, UInt<7>("h73")) @[Core_id.scala 123:25]
    node _imm_T = bits(io.If.IfInstr, 31, 31) @[Core_id.scala 125:44]
    node _imm_T_1 = bits(_imm_T, 0, 0) @[Bitwise.scala 74:15]
    node _imm_T_2 = mux(_imm_T_1, UInt<20>("hfffff"), UInt<20>("h0")) @[Bitwise.scala 74:12]
    node _imm_T_3 = bits(io.If.IfInstr, 31, 20) @[Core_id.scala 125:57]
    node _imm_T_4 = cat(_imm_T_2, _imm_T_3) @[Cat.scala 31:58]
    node _imm_T_5 = bits(io.If.IfInstr, 31, 31) @[Core_id.scala 126:44]
    node _imm_T_6 = bits(_imm_T_5, 0, 0) @[Bitwise.scala 74:15]
    node _imm_T_7 = mux(_imm_T_6, UInt<20>("hfffff"), UInt<20>("h0")) @[Bitwise.scala 74:12]
    node _imm_T_8 = bits(io.If.IfInstr, 31, 25) @[Core_id.scala 126:61]
    node _imm_T_9 = bits(io.If.IfInstr, 11, 7) @[Core_id.scala 126:76]
    node _imm_T_10 = cat(_imm_T_8, _imm_T_9) @[Cat.scala 31:58]
    node _imm_T_11 = cat(_imm_T_7, _imm_T_10) @[Cat.scala 31:58]
    node _imm_T_12 = bits(io.If.IfInstr, 31, 31) @[Core_id.scala 127:44]
    node _imm_T_13 = bits(_imm_T_12, 0, 0) @[Bitwise.scala 74:15]
    node _imm_T_14 = mux(_imm_T_13, UInt<19>("h7ffff"), UInt<19>("h0")) @[Bitwise.scala 74:12]
    node _imm_T_15 = bits(io.If.IfInstr, 31, 31) @[Core_id.scala 127:70]
    node _imm_T_16 = bits(io.If.IfInstr, 7, 7) @[Core_id.scala 127:82]
    node _imm_T_17 = cat(_imm_T_15, _imm_T_16) @[Cat.scala 31:58]
    node _imm_T_18 = bits(io.If.IfInstr, 30, 25) @[Core_id.scala 127:100]
    node _imm_T_19 = bits(io.If.IfInstr, 11, 8) @[Core_id.scala 127:115]
    node _imm_T_20 = cat(_imm_T_18, _imm_T_19) @[Cat.scala 31:58]
    node _imm_T_21 = cat(_imm_T_17, _imm_T_20) @[Cat.scala 31:58]
    node _imm_T_22 = cat(_imm_T_21, UInt<1>("h0")) @[Cat.scala 31:58]
    node _imm_T_23 = cat(_imm_T_14, _imm_T_22) @[Cat.scala 31:58]
    node _imm_T_24 = bits(io.If.IfInstr, 31, 12) @[Core_id.scala 128:36]
    node _imm_T_25 = cat(_imm_T_24, UInt<12>("h0")) @[Cat.scala 31:58]
    node _imm_T_26 = bits(io.If.IfInstr, 31, 31) @[Core_id.scala 129:49]
    node _imm_T_27 = bits(_imm_T_26, 0, 0) @[Bitwise.scala 74:15]
    node _imm_T_28 = mux(_imm_T_27, UInt<11>("h7ff"), UInt<11>("h0")) @[Bitwise.scala 74:12]
    node _imm_T_29 = bits(io.If.IfInstr, 31, 31) @[Core_id.scala 129:66]
    node _imm_T_30 = bits(io.If.IfInstr, 19, 12) @[Core_id.scala 129:78]
    node _imm_T_31 = cat(_imm_T_29, _imm_T_30) @[Cat.scala 31:58]
    node _imm_T_32 = cat(_imm_T_28, _imm_T_31) @[Cat.scala 31:58]
    node _imm_T_33 = bits(io.If.IfInstr, 20, 20) @[Core_id.scala 129:105]
    node _imm_T_34 = bits(io.If.IfInstr, 30, 21) @[Core_id.scala 129:117]
    node _imm_T_35 = cat(_imm_T_33, _imm_T_34) @[Cat.scala 31:58]
    node _imm_T_36 = cat(_imm_T_35, UInt<1>("h0")) @[Cat.scala 31:58]
    node _imm_T_37 = cat(_imm_T_32, _imm_T_36) @[Cat.scala 31:58]
    node _imm_T_38 = mux(J_type, _imm_T_37, UInt<32>("h0")) @[Core_id.scala 129:17]
    node _imm_T_39 = mux(U_type, _imm_T_25, _imm_T_38) @[Core_id.scala 128:17]
    node _imm_T_40 = mux(B_op, _imm_T_23, _imm_T_39) @[Core_id.scala 127:17]
    node _imm_T_41 = mux(S_op, _imm_T_11, _imm_T_40) @[Core_id.scala 126:17]
    node imm = mux(I_type, _imm_T_4, _imm_T_41) @[Core_id.scala 125:17]
    node _add_T = eq(fuct3, UInt<1>("h0")) @[Core_id.scala 135:36]
    node _add_T_1 = and(R_op, _add_T) @[Core_id.scala 135:27]
    node _add_T_2 = eq(fuct7, UInt<1>("h0")) @[Core_id.scala 135:56]
    node _add_T_3 = and(_add_T_1, _add_T_2) @[Core_id.scala 135:47]
    node _add_T_4 = eq(fuct3, UInt<1>("h0")) @[Core_id.scala 135:84]
    node _add_T_5 = and(I_op, _add_T_4) @[Core_id.scala 135:75]
    node _add_T_6 = or(_add_T_3, _add_T_5) @[Core_id.scala 135:66]
    node _add_T_7 = or(_add_T_6, L_op) @[Core_id.scala 135:93]
    node _add_T_8 = or(_add_T_7, S_op) @[Core_id.scala 135:99]
    node _add_T_9 = or(_add_T_8, B_op) @[Core_id.scala 135:105]
    node _add_T_10 = or(_add_T_9, J_type) @[Core_id.scala 135:111]
    node _add_T_11 = or(_add_T_10, jalr) @[Core_id.scala 135:118]
    node _add_T_12 = or(_add_T_11, lui) @[Core_id.scala 135:126]
    node _add_T_13 = or(_add_T_12, auipc) @[Core_id.scala 135:133]
    node add = mux(_add_T_13, UInt<1>("h1"), UInt<1>("h0")) @[Core_id.scala 135:20]
    node _sub_T = eq(fuct3, UInt<1>("h0")) @[Core_id.scala 136:36]
    node _sub_T_1 = and(R_op, _sub_T) @[Core_id.scala 136:27]
    node _sub_T_2 = eq(fuct7, UInt<6>("h20")) @[Core_id.scala 136:56]
    node _sub_T_3 = and(_sub_T_1, _sub_T_2) @[Core_id.scala 136:47]
    node sub = mux(_sub_T_3, UInt<1>("h1"), UInt<1>("h0")) @[Core_id.scala 136:20]
    node _slt_T = eq(fuct3, UInt<2>("h2")) @[Core_id.scala 137:36]
    node _slt_T_1 = and(R_op, _slt_T) @[Core_id.scala 137:27]
    node _slt_T_2 = eq(fuct7, UInt<1>("h0")) @[Core_id.scala 137:56]
    node _slt_T_3 = and(_slt_T_1, _slt_T_2) @[Core_id.scala 137:47]
    node _slt_T_4 = eq(fuct3, UInt<2>("h2")) @[Core_id.scala 137:83]
    node _slt_T_5 = and(I_op, _slt_T_4) @[Core_id.scala 137:74]
    node _slt_T_6 = or(_slt_T_3, _slt_T_5) @[Core_id.scala 137:65]
    node slt = mux(_slt_T_6, UInt<1>("h1"), UInt<1>("h0")) @[Core_id.scala 137:20]
    node _sltu_T = eq(fuct3, UInt<2>("h3")) @[Core_id.scala 138:36]
    node _sltu_T_1 = and(R_op, _sltu_T) @[Core_id.scala 138:27]
    node _sltu_T_2 = eq(fuct7, UInt<1>("h0")) @[Core_id.scala 138:56]
    node _sltu_T_3 = and(_sltu_T_1, _sltu_T_2) @[Core_id.scala 138:47]
    node _sltu_T_4 = eq(fuct3, UInt<2>("h3")) @[Core_id.scala 138:83]
    node _sltu_T_5 = and(I_op, _sltu_T_4) @[Core_id.scala 138:74]
    node _sltu_T_6 = or(_sltu_T_3, _sltu_T_5) @[Core_id.scala 138:65]
    node sltu = mux(_sltu_T_6, UInt<1>("h1"), UInt<1>("h0")) @[Core_id.scala 138:20]
    node _and_T = eq(fuct3, UInt<3>("h7")) @[Core_id.scala 139:36]
    node _and_T_1 = and(R_op, _and_T) @[Core_id.scala 139:27]
    node _and_T_2 = eq(fuct7, UInt<1>("h0")) @[Core_id.scala 139:56]
    node _and_T_3 = and(_and_T_1, _and_T_2) @[Core_id.scala 139:47]
    node _and_T_4 = eq(fuct3, UInt<3>("h7")) @[Core_id.scala 139:83]
    node _and_T_5 = and(I_op, _and_T_4) @[Core_id.scala 139:74]
    node _and_T_6 = or(_and_T_3, _and_T_5) @[Core_id.scala 139:65]
    node and = mux(_and_T_6, UInt<1>("h1"), UInt<1>("h0")) @[Core_id.scala 139:20]
    node _or_T = eq(fuct3, UInt<3>("h6")) @[Core_id.scala 140:36]
    node _or_T_1 = and(R_op, _or_T) @[Core_id.scala 140:27]
    node _or_T_2 = eq(fuct7, UInt<1>("h0")) @[Core_id.scala 140:56]
    node _or_T_3 = and(_or_T_1, _or_T_2) @[Core_id.scala 140:47]
    node _or_T_4 = eq(fuct3, UInt<3>("h6")) @[Core_id.scala 140:84]
    node _or_T_5 = and(I_op, _or_T_4) @[Core_id.scala 140:75]
    node _or_T_6 = or(_or_T_3, _or_T_5) @[Core_id.scala 140:66]
    node or = mux(_or_T_6, UInt<1>("h1"), UInt<1>("h0")) @[Core_id.scala 140:20]
    node _xor_T = eq(fuct3, UInt<3>("h4")) @[Core_id.scala 141:36]
    node _xor_T_1 = and(R_op, _xor_T) @[Core_id.scala 141:27]
    node _xor_T_2 = eq(fuct7, UInt<1>("h0")) @[Core_id.scala 141:56]
    node _xor_T_3 = and(_xor_T_1, _xor_T_2) @[Core_id.scala 141:47]
    node _xor_T_4 = eq(fuct3, UInt<3>("h4")) @[Core_id.scala 141:83]
    node _xor_T_5 = and(I_op, _xor_T_4) @[Core_id.scala 141:74]
    node _xor_T_6 = or(_xor_T_3, _xor_T_5) @[Core_id.scala 141:65]
    node xor = mux(_xor_T_6, UInt<1>("h1"), UInt<1>("h0")) @[Core_id.scala 141:20]
    node _sll_T = eq(fuct3, UInt<1>("h1")) @[Core_id.scala 142:36]
    node _sll_T_1 = and(R_op, _sll_T) @[Core_id.scala 142:27]
    node _sll_T_2 = eq(fuct7, UInt<1>("h0")) @[Core_id.scala 142:56]
    node _sll_T_3 = and(_sll_T_1, _sll_T_2) @[Core_id.scala 142:47]
    node _sll_T_4 = eq(fuct3, UInt<1>("h1")) @[Core_id.scala 142:83]
    node _sll_T_5 = and(I_op, _sll_T_4) @[Core_id.scala 142:74]
    node _sll_T_6 = eq(fuct7, UInt<1>("h0")) @[Core_id.scala 142:103]
    node _sll_T_7 = and(_sll_T_5, _sll_T_6) @[Core_id.scala 142:94]
    node _sll_T_8 = or(_sll_T_3, _sll_T_7) @[Core_id.scala 142:65]
    node sll = mux(_sll_T_8, UInt<1>("h1"), UInt<1>("h0")) @[Core_id.scala 142:20]
    node _srl_T = eq(fuct3, UInt<3>("h5")) @[Core_id.scala 143:36]
    node _srl_T_1 = and(R_op, _srl_T) @[Core_id.scala 143:27]
    node _srl_T_2 = eq(fuct7, UInt<1>("h0")) @[Core_id.scala 143:56]
    node _srl_T_3 = and(_srl_T_1, _srl_T_2) @[Core_id.scala 143:47]
    node _srl_T_4 = eq(fuct3, UInt<3>("h5")) @[Core_id.scala 143:83]
    node _srl_T_5 = and(I_op, _srl_T_4) @[Core_id.scala 143:74]
    node _srl_T_6 = eq(fuct7, UInt<1>("h0")) @[Core_id.scala 143:103]
    node _srl_T_7 = and(_srl_T_5, _srl_T_6) @[Core_id.scala 143:94]
    node _srl_T_8 = or(_srl_T_3, _srl_T_7) @[Core_id.scala 143:65]
    node srl = mux(_srl_T_8, UInt<1>("h1"), UInt<1>("h0")) @[Core_id.scala 143:20]
    node _sra_T = eq(fuct3, UInt<3>("h5")) @[Core_id.scala 144:36]
    node _sra_T_1 = and(R_op, _sra_T) @[Core_id.scala 144:27]
    node _sra_T_2 = eq(fuct7, UInt<6>("h20")) @[Core_id.scala 144:56]
    node _sra_T_3 = and(_sra_T_1, _sra_T_2) @[Core_id.scala 144:47]
    node _sra_T_4 = eq(fuct3, UInt<3>("h5")) @[Core_id.scala 144:87]
    node _sra_T_5 = and(I_op, _sra_T_4) @[Core_id.scala 144:78]
    node _sra_T_6 = eq(fuct7, UInt<6>("h20")) @[Core_id.scala 144:107]
    node _sra_T_7 = and(_sra_T_5, _sra_T_6) @[Core_id.scala 144:98]
    node _sra_T_8 = or(_sra_T_3, _sra_T_7) @[Core_id.scala 144:69]
    node sra = mux(_sra_T_8, UInt<1>("h1"), UInt<1>("h0")) @[Core_id.scala 144:20]
    node _ByteS_T = or(L_op, S_op) @[Core_id.scala 147:21]
    node _ByteS_T_1 = eq(fuct3, UInt<1>("h0")) @[Core_id.scala 147:39]
    node ByteS = and(_ByteS_T, _ByteS_T_1) @[Core_id.scala 147:30]
    node _HalfS_T = or(L_op, S_op) @[Core_id.scala 148:21]
    node _HalfS_T_1 = eq(fuct3, UInt<1>("h1")) @[Core_id.scala 148:39]
    node HalfS = and(_HalfS_T, _HalfS_T_1) @[Core_id.scala 148:30]
    node _WordS_T = or(L_op, S_op) @[Core_id.scala 149:21]
    node _WordS_T_1 = eq(fuct3, UInt<2>("h2")) @[Core_id.scala 149:39]
    node WordS = and(_WordS_T, _WordS_T_1) @[Core_id.scala 149:30]
    node _ByteU_T = or(L_op, S_op) @[Core_id.scala 150:21]
    node _ByteU_T_1 = eq(fuct3, UInt<3>("h4")) @[Core_id.scala 150:39]
    node ByteU = and(_ByteU_T, _ByteU_T_1) @[Core_id.scala 150:30]
    node _HalfU_T = or(L_op, S_op) @[Core_id.scala 151:21]
    node _HalfU_T_1 = eq(fuct3, UInt<3>("h5")) @[Core_id.scala 151:39]
    node HalfU = and(_HalfU_T, _HalfU_T_1) @[Core_id.scala 151:30]
    node _beq_T = eq(fuct3, UInt<1>("h0")) @[Core_id.scala 155:29]
    node beq = and(B_op, _beq_T) @[Core_id.scala 155:20]
    node _bne_T = eq(fuct3, UInt<1>("h1")) @[Core_id.scala 156:29]
    node bne = and(B_op, _bne_T) @[Core_id.scala 156:20]
    node _blt_T = eq(fuct3, UInt<3>("h4")) @[Core_id.scala 157:29]
    node blt = and(B_op, _blt_T) @[Core_id.scala 157:20]
    node _bge_T = eq(fuct3, UInt<3>("h5")) @[Core_id.scala 158:29]
    node bge = and(B_op, _bge_T) @[Core_id.scala 158:20]
    node _bltu_T = eq(fuct3, UInt<3>("h6")) @[Core_id.scala 159:29]
    node bltu = and(B_op, _bltu_T) @[Core_id.scala 159:20]
    node _bgeu_T = eq(fuct3, UInt<3>("h7")) @[Core_id.scala 160:29]
    node bgeu = and(B_op, _bgeu_T) @[Core_id.scala 160:20]
    node _csrrw_T = eq(fuct3, UInt<1>("h1")) @[Core_id.scala 164:34]
    node csrrw = and(csr_opcode, _csrrw_T) @[Core_id.scala 164:25]
    node _csrrs_T = eq(fuct3, UInt<2>("h2")) @[Core_id.scala 165:34]
    node csrrs = and(csr_opcode, _csrrs_T) @[Core_id.scala 165:25]
    node _csrrc_T = eq(fuct3, UInt<2>("h3")) @[Core_id.scala 166:34]
    node csrrc = and(csr_opcode, _csrrc_T) @[Core_id.scala 166:25]
    node _csrrwi_T = eq(fuct3, UInt<3>("h5")) @[Core_id.scala 167:34]
    node csrrwi = and(csr_opcode, _csrrwi_T) @[Core_id.scala 167:25]
    node _csrrsi_T = eq(fuct3, UInt<3>("h6")) @[Core_id.scala 168:34]
    node csrrsi = and(csr_opcode, _csrrsi_T) @[Core_id.scala 168:25]
    node _csrrci_T = eq(fuct3, UInt<3>("h7")) @[Core_id.scala 169:34]
    node csrrci = and(csr_opcode, _csrrci_T) @[Core_id.scala 169:25]
    node _csri_T = bits(fuct3, 2, 2) @[Core_id.scala 171:33]
    node _csri_T_1 = eq(_csri_T, UInt<1>("h1")) @[Core_id.scala 171:37]
    node csri = and(csr_opcode, _csri_T_1) @[Core_id.scala 171:25]
    node _csrr_T = bits(fuct3, 2, 2) @[Core_id.scala 172:33]
    node _csrr_T_1 = eq(_csrr_T, UInt<1>("h0")) @[Core_id.scala 172:37]
    node csrr = and(csr_opcode, _csrr_T_1) @[Core_id.scala 172:25]
    node csr = bits(io.If.IfInstr, 31, 20) @[Core_id.scala 173:21]
    node _zimm_T = bits(io.If.IfInstr, 19, 15) @[Core_id.scala 174:35]
    node zimm = cat(UInt<27>("h0"), _zimm_T) @[Cat.scala 31:58]
    io.If.IdReady <= IdEn @[Core_id.scala 177:14]
    node _io_RegFile_Rs1_T = or(R_op, I_type) @[Core_id.scala 179:27]
    node _io_RegFile_Rs1_T_1 = or(_io_RegFile_Rs1_T, S_op) @[Core_id.scala 179:35]
    node _io_RegFile_Rs1_T_2 = or(_io_RegFile_Rs1_T_1, B_op) @[Core_id.scala 179:43]
    node _io_RegFile_Rs1_T_3 = or(_io_RegFile_Rs1_T_2, csrr) @[Core_id.scala 179:51]
    node _io_RegFile_Rs1_T_4 = mux(_io_RegFile_Rs1_T_3, rs1, UInt<1>("h0")) @[Core_id.scala 179:20]
    io.RegFile.Rs1 <= _io_RegFile_Rs1_T_4 @[Core_id.scala 179:15]
    node _io_RegFile_Rs2_T = or(R_op, S_op) @[Core_id.scala 180:27]
    node _io_RegFile_Rs2_T_1 = or(_io_RegFile_Rs2_T, B_op) @[Core_id.scala 180:35]
    node _io_RegFile_Rs2_T_2 = mux(_io_RegFile_Rs2_T_1, rs2, UInt<1>("h0")) @[Core_id.scala 180:20]
    io.RegFile.Rs2 <= _io_RegFile_Rs2_T_2 @[Core_id.scala 180:15]
    node _io_RegFile_Rd_T = or(R_op, I_type) @[Core_id.scala 181:27]
    node _io_RegFile_Rd_T_1 = or(_io_RegFile_Rd_T, U_type) @[Core_id.scala 181:35]
    node _io_RegFile_Rd_T_2 = or(_io_RegFile_Rd_T_1, J_type) @[Core_id.scala 181:43]
    node _io_RegFile_Rd_T_3 = or(_io_RegFile_Rd_T_2, csr_opcode) @[Core_id.scala 181:51]
    node _io_RegFile_Rd_T_4 = mux(_io_RegFile_Rd_T_3, rd, UInt<1>("h0")) @[Core_id.scala 181:20]
    io.RegFile.Rd <= _io_RegFile_Rd_T_4 @[Core_id.scala 181:15]
    io.Exe.AluOp <= alu_op @[Core_id.scala 183:18]
    io.Exe.Data1 <= data1 @[Core_id.scala 184:18]
    io.Exe.Data2 <= data2 @[Core_id.scala 185:18]
    io.Exe.MmuEn <= mmu_en @[Core_id.scala 186:18]
    io.Exe.MmuWen <= mmu_wen @[Core_id.scala 187:18]
    io.Exe.MmuOp <= mmu_op @[Core_id.scala 188:18]
    io.Exe.MmuRData2 <= mmu_RData2 @[Core_id.scala 189:18]
    io.Exe.Rd <= rd_r @[Core_id.scala 191:18]
    io.Exe.PcuEn <= pcu_en @[Core_id.scala 192:18]
    io.Exe.PcuOp <= pcu_op @[Core_id.scala 193:18]
    io.Exe.PcuData1 <= pcu_data1 @[Core_id.scala 194:18]
    io.Exe.PcuData2 <= pcu_data2 @[Core_id.scala 195:18]
    io.Exe.CsrEn <= csr_en @[Core_id.scala 197:18]
    io.Exe.CsrOp <= csr_op @[Core_id.scala 198:18]
    io.Exe.CsrWAddr <= csr_waddr @[Core_id.scala 199:18]
    io.Exe.CsrData <= csr_data @[Core_id.scala 200:18]
    io.Exe.CsrImm <= csr_imm @[Core_id.scala 201:18]
    io.Exe.IdValid <= IdValid @[Core_id.scala 203:18]
    node _io_CsrReg_CsrAddr_T = mux(csr_opcode, csr, UInt<12>("h0")) @[Core_id.scala 205:24]
    io.CsrReg.CsrAddr <= _io_CsrReg_CsrAddr_T @[Core_id.scala 205:18]
    when io.Exe.PcJump : @[Core_id.scala 209:20]
      alu_op <= UInt<10>("h0") @[Core_id.scala 210:14]
      data1 <= UInt<32>("h0") @[Core_id.scala 211:14]
      data2 <= UInt<32>("h0") @[Core_id.scala 212:14]
      mmu_en <= UInt<1>("h0") @[Core_id.scala 213:14]
      mmu_wen <= UInt<1>("h0") @[Core_id.scala 214:14]
      mmu_RData2 <= UInt<32>("h0") @[Core_id.scala 215:15]
      pcu_en <= UInt<1>("h0") @[Core_id.scala 216:14]
      pcu_op <= UInt<8>("h0") @[Core_id.scala 217:14]
      pcu_data1 <= UInt<32>("h0") @[Core_id.scala 218:14]
      pcu_data2 <= UInt<32>("h0") @[Core_id.scala 219:14]
      rd_r <= UInt<5>("h0") @[Core_id.scala 220:14]
      csr_en <= UInt<1>("h0") @[Core_id.scala 221:14]
      csr_op <= UInt<3>("h0") @[Core_id.scala 222:14]
      csr_waddr <= UInt<12>("h0") @[Core_id.scala 223:14]
      csr_data <= UInt<32>("h0") @[Core_id.scala 224:14]
      csr_imm <= UInt<32>("h0") @[Core_id.scala 225:14]
      IdValid <= UInt<1>("h0") @[Core_id.scala 226:14]
    else :
      when IdEn : @[Core_id.scala 228:17]
        node _alu_op_T = cat(sra, srl) @[Cat.scala 31:58]
        node _alu_op_T_1 = cat(_alu_op_T, sll) @[Cat.scala 31:58]
        node _alu_op_T_2 = cat(_alu_op_T_1, xor) @[Cat.scala 31:58]
        node _alu_op_T_3 = cat(_alu_op_T_2, or) @[Cat.scala 31:58]
        node _alu_op_T_4 = cat(_alu_op_T_3, and) @[Cat.scala 31:58]
        node _alu_op_T_5 = cat(_alu_op_T_4, sltu) @[Cat.scala 31:58]
        node _alu_op_T_6 = cat(_alu_op_T_5, slt) @[Cat.scala 31:58]
        node _alu_op_T_7 = cat(_alu_op_T_6, sub) @[Cat.scala 31:58]
        node _alu_op_T_8 = cat(_alu_op_T_7, add) @[Cat.scala 31:58]
        alu_op <= _alu_op_T_8 @[Core_id.scala 229:15]
        node _data1_T = or(auipc, B_op) @[Core_id.scala 230:28]
        node _data1_T_1 = or(_data1_T, J_type) @[Core_id.scala 230:36]
        node _data1_T_2 = mux(lui, UInt<32>("h0"), io.RegFile.RData1) @[Core_id.scala 230:50]
        node _data1_T_3 = mux(_data1_T_1, io.If.Pc, _data1_T_2) @[Core_id.scala 230:22]
        data1 <= _data1_T_3 @[Core_id.scala 230:15]
        node _data2_T = mux(R_op, io.RegFile.RData2, imm) @[Core_id.scala 231:22]
        data2 <= _data2_T @[Core_id.scala 231:15]
        node _mmu_en_T = or(L_op, S_op) @[Core_id.scala 232:24]
        mmu_en <= _mmu_en_T @[Core_id.scala 232:15]
        mmu_wen <= S_op @[Core_id.scala 233:15]
        node _mmu_op_T = cat(HalfU, ByteU) @[Cat.scala 31:58]
        node _mmu_op_T_1 = cat(_mmu_op_T, WordS) @[Cat.scala 31:58]
        node _mmu_op_T_2 = cat(_mmu_op_T_1, HalfS) @[Cat.scala 31:58]
        node _mmu_op_T_3 = cat(_mmu_op_T_2, ByteS) @[Cat.scala 31:58]
        mmu_op <= _mmu_op_T_3 @[Core_id.scala 234:15]
        node _mmu_RData2_T = mux(S_op, io.RegFile.RData2, UInt<32>("h0")) @[Core_id.scala 235:22]
        mmu_RData2 <= _mmu_RData2_T @[Core_id.scala 235:15]
        node _pcu_en_T = or(B_op, J_type) @[Core_id.scala 236:24]
        node _pcu_en_T_1 = or(_pcu_en_T, jalr) @[Core_id.scala 236:31]
        pcu_en <= _pcu_en_T_1 @[Core_id.scala 236:14]
        node _pcu_op_T = cat(jalr, J_type) @[Cat.scala 31:58]
        node _pcu_op_T_1 = cat(_pcu_op_T, bgeu) @[Cat.scala 31:58]
        node _pcu_op_T_2 = cat(_pcu_op_T_1, bltu) @[Cat.scala 31:58]
        node _pcu_op_T_3 = cat(_pcu_op_T_2, bge) @[Cat.scala 31:58]
        node _pcu_op_T_4 = cat(_pcu_op_T_3, blt) @[Cat.scala 31:58]
        node _pcu_op_T_5 = cat(_pcu_op_T_4, bne) @[Cat.scala 31:58]
        node _pcu_op_T_6 = cat(_pcu_op_T_5, beq) @[Cat.scala 31:58]
        pcu_op <= _pcu_op_T_6 @[Core_id.scala 237:14]
        node _pcu_data1_T = mux(B_op, io.RegFile.RData1, io.If.Pc) @[Core_id.scala 238:22]
        pcu_data1 <= _pcu_data1_T @[Core_id.scala 238:14]
        node _pcu_data2_T = mux(B_op, io.RegFile.RData2, UInt<32>("h4")) @[Core_id.scala 239:22]
        pcu_data2 <= _pcu_data2_T @[Core_id.scala 239:14]
        rd_r <= io.RegFile.Rd @[Core_id.scala 240:14]
        csr_en <= csr_opcode @[Core_id.scala 241:14]
        node _csr_op_T = or(csrrc, csrrci) @[Core_id.scala 242:31]
        node _csr_op_T_1 = or(csrrs, csrrsi) @[Core_id.scala 242:46]
        node _csr_op_T_2 = cat(_csr_op_T, _csr_op_T_1) @[Cat.scala 31:58]
        node _csr_op_T_3 = or(csrrw, csrrwi) @[Core_id.scala 242:62]
        node _csr_op_T_4 = cat(_csr_op_T_2, _csr_op_T_3) @[Cat.scala 31:58]
        csr_op <= _csr_op_T_4 @[Core_id.scala 242:14]
        csr_waddr <= io.CsrReg.CsrAddr @[Core_id.scala 243:14]
        csr_data <= CsrData @[Core_id.scala 244:14]
        node _csr_imm_T = mux(csri, zimm, io.RegFile.RData1) @[Core_id.scala 245:21]
        csr_imm <= _csr_imm_T @[Core_id.scala 245:14]
        IdValid <= UInt<1>("h1") @[Core_id.scala 246:14]
      else :
        node _T = eq(IdEn, UInt<1>("h0")) @[Core_id.scala 248:24]
        node _T_1 = and(io.Exe.ExeReady, _T) @[Core_id.scala 248:21]
        when _T_1 : @[Core_id.scala 248:30]
          IdValid <= UInt<1>("h0") @[Core_id.scala 249:14]
        else :
          alu_op <= alu_op @[Core_id.scala 251:14]
          data1 <= data1 @[Core_id.scala 252:14]
          data2 <= data2 @[Core_id.scala 253:14]
          mmu_en <= mmu_en @[Core_id.scala 254:14]
          mmu_wen <= mmu_wen @[Core_id.scala 255:14]
          mmu_RData2 <= mmu_RData2 @[Core_id.scala 256:15]
          pcu_en <= pcu_en @[Core_id.scala 257:14]
          pcu_op <= pcu_op @[Core_id.scala 258:14]
          pcu_data1 <= pcu_data1 @[Core_id.scala 259:14]
          pcu_data2 <= pcu_data2 @[Core_id.scala 260:14]
          rd_r <= rd_r @[Core_id.scala 261:14]
          csr_en <= csr_en @[Core_id.scala 262:14]
          csr_op <= csr_op @[Core_id.scala 263:14]
          csr_waddr <= csr_waddr @[Core_id.scala 264:14]
          csr_data <= csr_data @[Core_id.scala 265:14]
          csr_imm <= csr_imm @[Core_id.scala 266:14]
          IdValid <= IdValid @[Core_id.scala 267:14]
    io.Debug_alu_op <= alu_op @[Core_id.scala 270:20]
    io.Debug_data1 <= data1 @[Core_id.scala 271:20]
    io.Debug_data2 <= data2 @[Core_id.scala 272:20]
    io.Debug_mmu_en <= mmu_en @[Core_id.scala 273:20]
    io.Debug_mmu_wen <= mmu_wen @[Core_id.scala 274:20]
    io.Debug_mmu_op <= mmu_op @[Core_id.scala 275:20]
    io.Debug_mmu_RData2 <= mmu_RData2 @[Core_id.scala 276:20]
    io.Debug_pcu_en <= pcu_en @[Core_id.scala 277:20]
    io.Debug_pcu_op <= pcu_op @[Core_id.scala 278:20]
    io.Debug_pcu_data1 <= pcu_data1 @[Core_id.scala 279:20]
    io.Debug_pcu_data2 <= pcu_data2 @[Core_id.scala 280:20]
    io.Debug_rd_r <= rd_r @[Core_id.scala 281:20]
    io.Debug_csr_en <= csr_en @[Core_id.scala 282:20]
    io.Debug_csr_op <= csr_op @[Core_id.scala 283:20]
    io.Debug_csr_waddr <= csr_waddr @[Core_id.scala 284:20]
    io.Debug_csr_data <= csr_data @[Core_id.scala 285:20]
    io.Debug_csr_imm <= csr_imm @[Core_id.scala 286:20]
    io.Debug_IdValid <= IdValid @[Core_id.scala 287:20]

  module ALU :
    input clock : Clock
    input reset : Reset
    output io : { flip op : UInt<10>, flip data1 : UInt<32>, flip data2 : UInt<32>, result : UInt<32>}

    wire result : UInt<32> @[Alu.scala 16:20]
    io.result <= result @[Alu.scala 18:14]
    node _op_add_T = bits(io.op, 0, 0) @[Alu.scala 20:19]
    node op_add = eq(_op_add_T, UInt<1>("h1")) @[Alu.scala 20:23]
    node _op_sub_T = bits(io.op, 1, 1) @[Alu.scala 21:19]
    node op_sub = eq(_op_sub_T, UInt<1>("h1")) @[Alu.scala 21:23]
    node _op_slt_T = bits(io.op, 2, 2) @[Alu.scala 22:19]
    node op_slt = eq(_op_slt_T, UInt<1>("h1")) @[Alu.scala 22:23]
    node _op_sltu_T = bits(io.op, 3, 3) @[Alu.scala 23:19]
    node op_sltu = eq(_op_sltu_T, UInt<1>("h1")) @[Alu.scala 23:23]
    node _op_and_T = bits(io.op, 4, 4) @[Alu.scala 24:19]
    node op_and = eq(_op_and_T, UInt<1>("h1")) @[Alu.scala 24:23]
    node _op_or_T = bits(io.op, 5, 5) @[Alu.scala 25:19]
    node op_or = eq(_op_or_T, UInt<1>("h1")) @[Alu.scala 25:23]
    node _op_xor_T = bits(io.op, 6, 6) @[Alu.scala 26:19]
    node op_xor = eq(_op_xor_T, UInt<1>("h1")) @[Alu.scala 26:23]
    node _op_sll_T = bits(io.op, 7, 7) @[Alu.scala 27:19]
    node op_sll = eq(_op_sll_T, UInt<1>("h1")) @[Alu.scala 27:23]
    node _op_srl_T = bits(io.op, 8, 8) @[Alu.scala 28:19]
    node op_srl = eq(_op_srl_T, UInt<1>("h1")) @[Alu.scala 28:23]
    node _op_sra_T = bits(io.op, 9, 9) @[Alu.scala 29:19]
    node op_sra = eq(_op_sra_T, UInt<1>("h1")) @[Alu.scala 29:23]
    node _adder_b_T = or(op_sub, op_slt) @[Alu.scala 32:32]
    node _adder_b_T_1 = or(_adder_b_T, op_sltu) @[Alu.scala 32:42]
    node _adder_b_T_2 = not(io.data2) @[Alu.scala 32:55]
    node adder_b = mux(_adder_b_T_1, _adder_b_T_2, io.data2) @[Alu.scala 32:24]
    node _adder_cin_T = or(op_sub, op_slt) @[Alu.scala 33:32]
    node _adder_cin_T_1 = or(_adder_cin_T, op_sltu) @[Alu.scala 33:42]
    node adder_cin = mux(_adder_cin_T_1, UInt<32>("h1"), UInt<32>("h0")) @[Alu.scala 33:24]
    wire adder_cout_result : UInt<33> @[Alu.scala 34:30]
    node _adder_cout_result_T = cat(UInt<1>("h0"), io.data1) @[Cat.scala 31:58]
    node _adder_cout_result_T_1 = cat(UInt<1>("h0"), adder_b) @[Cat.scala 31:58]
    node _adder_cout_result_T_2 = add(_adder_cout_result_T, _adder_cout_result_T_1) @[Alu.scala 35:46]
    node _adder_cout_result_T_3 = tail(_adder_cout_result_T_2, 1) @[Alu.scala 35:46]
    node _adder_cout_result_T_4 = cat(UInt<1>("h0"), adder_cin) @[Cat.scala 31:58]
    node _adder_cout_result_T_5 = add(_adder_cout_result_T_3, _adder_cout_result_T_4) @[Alu.scala 35:70]
    node _adder_cout_result_T_6 = tail(_adder_cout_result_T_5, 1) @[Alu.scala 35:70]
    adder_cout_result <= _adder_cout_result_T_6 @[Alu.scala 35:21]
    node adder_cout = bits(adder_cout_result, 32, 32) @[Alu.scala 37:39]
    node add_sub_result = bits(adder_cout_result, 31, 0) @[Alu.scala 38:39]
    node _slt_result_T = bits(io.data1, 31, 31) @[Alu.scala 41:31]
    node _slt_result_T_1 = bits(io.data2, 31, 31) @[Alu.scala 41:45]
    node _slt_result_T_2 = not(_slt_result_T_1) @[Alu.scala 41:39]
    node _slt_result_T_3 = and(_slt_result_T, _slt_result_T_2) @[Alu.scala 41:36]
    node _slt_result_T_4 = bits(io.data1, 31, 31) @[Alu.scala 42:35]
    node _slt_result_T_5 = bits(io.data2, 31, 31) @[Alu.scala 42:49]
    node _slt_result_T_6 = eq(_slt_result_T_4, _slt_result_T_5) @[Alu.scala 42:40]
    node _slt_result_T_7 = not(adder_cout) @[Alu.scala 42:58]
    node _slt_result_T_8 = and(_slt_result_T_6, _slt_result_T_7) @[Alu.scala 42:55]
    node _slt_result_T_9 = or(_slt_result_T_3, _slt_result_T_8) @[Alu.scala 42:25]
    node slt_result = cat(UInt<31>("h0"), _slt_result_T_9) @[Cat.scala 31:58]
    node _sltu_result_T = not(adder_cout) @[Alu.scala 43:37]
    node sltu_result = cat(UInt<31>("h0"), _sltu_result_T) @[Cat.scala 31:58]
    node and_result = and(io.data1, io.data2) @[Alu.scala 44:26]
    node or_result = or(io.data1, io.data2) @[Alu.scala 45:26]
    node xor_result = xor(io.data1, io.data2) @[Alu.scala 46:26]
    node _sll_result_T = bits(io.data2, 4, 0) @[Alu.scala 47:34]
    node sll_result = dshl(io.data1, _sll_result_T) @[Alu.scala 47:26]
    node _data1_64_T = bits(io.data1, 31, 31) @[Alu.scala 48:45]
    node _data1_64_T_1 = and(op_sra, _data1_64_T) @[Alu.scala 48:38]
    node _data1_64_T_2 = bits(_data1_64_T_1, 0, 0) @[Bitwise.scala 74:15]
    node _data1_64_T_3 = mux(_data1_64_T_2, UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 74:12]
    node data1_64 = cat(_data1_64_T_3, io.data1) @[Cat.scala 31:58]
    node _sr64_result_T = bits(io.data2, 4, 0) @[Alu.scala 49:37]
    node sr64_result = dshr(data1_64, _sr64_result_T) @[Alu.scala 49:29]
    node sr_result = bits(sr64_result, 31, 0) @[Alu.scala 50:32]
    when op_add : @[Alu.scala 66:17]
      result <= add_sub_result @[Alu.scala 67:14]
    else :
      when op_sub : @[Alu.scala 68:23]
        result <= add_sub_result @[Alu.scala 69:14]
      else :
        when op_slt : @[Alu.scala 70:23]
          result <= slt_result @[Alu.scala 71:14]
        else :
          when op_sltu : @[Alu.scala 72:24]
            result <= sltu_result @[Alu.scala 73:14]
          else :
            when op_and : @[Alu.scala 74:23]
              result <= and_result @[Alu.scala 75:14]
            else :
              when op_or : @[Alu.scala 76:22]
                result <= or_result @[Alu.scala 77:14]
              else :
                when op_xor : @[Alu.scala 78:23]
                  result <= xor_result @[Alu.scala 79:14]
                else :
                  when op_sll : @[Alu.scala 80:23]
                    result <= sll_result @[Alu.scala 81:14]
                  else :
                    when op_srl : @[Alu.scala 82:23]
                      result <= sr_result @[Alu.scala 83:14]
                    else :
                      when op_sra : @[Alu.scala 84:23]
                        result <= sr_result @[Alu.scala 85:14]
                      else :
                        result <= UInt<32>("h0") @[Alu.scala 87:14]

  module Mmu :
    input clock : Clock
    input reset : Reset
    output io : { flip MmuEn : UInt<1>, flip MmuWen : UInt<1>, flip MmuOp : UInt<5>, flip MmuRData2 : UInt<32>, data_sram_en : UInt<1>, data_sram_wen : UInt<1>, data_sram_wdata : UInt<32>, data_size : UInt<2>, DataMemValid : UInt<1>, LoadOp : UInt<5>}

    wire data_sram_wen : UInt<1> @[Alu.scala 118:28]
    node _ByteS_T = bits(io.MmuOp, 0, 0) @[Alu.scala 122:23]
    node ByteS = eq(_ByteS_T, UInt<1>("h1")) @[Alu.scala 122:27]
    node _HalfS_T = bits(io.MmuOp, 1, 1) @[Alu.scala 123:23]
    node HalfS = eq(_HalfS_T, UInt<1>("h1")) @[Alu.scala 123:27]
    node _WordS_T = bits(io.MmuOp, 2, 2) @[Alu.scala 124:23]
    node WordS = eq(_WordS_T, UInt<1>("h1")) @[Alu.scala 124:27]
    node _ByteU_T = bits(io.MmuOp, 3, 3) @[Alu.scala 125:23]
    node ByteU = eq(_ByteU_T, UInt<1>("h1")) @[Alu.scala 125:27]
    node _HalfU_T = bits(io.MmuOp, 4, 4) @[Alu.scala 126:23]
    node HalfU = eq(_HalfU_T, UInt<1>("h1")) @[Alu.scala 126:27]
    node _data_sram_wen_T = eq(io.MmuWen, UInt<1>("h1")) @[Alu.scala 130:29]
    data_sram_wen <= _data_sram_wen_T @[Alu.scala 130:19]
    node _T = or(ByteS, ByteU) @[Alu.scala 132:16]
    when _T : @[Alu.scala 132:25]
      io.data_size <= UInt<1>("h0") @[Alu.scala 133:20]
    else :
      node _T_1 = or(HalfS, HalfU) @[Alu.scala 134:22]
      when _T_1 : @[Alu.scala 134:31]
        io.data_size <= UInt<1>("h1") @[Alu.scala 135:20]
      else :
        when WordS : @[Alu.scala 136:22]
          io.data_size <= UInt<2>("h3") @[Alu.scala 137:20]
        else :
          io.data_size <= UInt<1>("h0") @[Alu.scala 139:20]
    io.data_sram_en <= io.MmuEn @[Alu.scala 143:25]
    io.data_sram_wen <= data_sram_wen @[Alu.scala 144:25]
    io.data_sram_wdata <= io.MmuRData2 @[Alu.scala 145:25]
    node _io_DataMemValid_T = eq(io.MmuWen, UInt<1>("h0")) @[Alu.scala 146:44]
    node _io_DataMemValid_T_1 = and(io.MmuEn, _io_DataMemValid_T) @[Alu.scala 146:34]
    io.DataMemValid <= _io_DataMemValid_T_1 @[Alu.scala 146:25]
    io.LoadOp <= io.MmuOp @[Alu.scala 147:25]

  module Pcu :
    input clock : Clock
    input reset : Reset
    output io : { flip PcuOp : UInt<8>, flip PcuData1 : UInt<32>, flip PcuData2 : UInt<32>, PcJump : UInt<1>, PcuResult : UInt<32>}

    wire PcJump : UInt<1> @[Alu.scala 166:23]
    wire PcuResult : UInt<32> @[Alu.scala 167:23]
    io.PcJump <= PcJump @[Alu.scala 169:16]
    io.PcuResult <= PcuResult @[Alu.scala 170:16]
    node _beq_T = bits(io.PcuOp, 0, 0) @[Alu.scala 172:22]
    node beq = eq(_beq_T, UInt<1>("h1")) @[Alu.scala 172:26]
    node _bne_T = bits(io.PcuOp, 1, 1) @[Alu.scala 173:22]
    node bne = eq(_bne_T, UInt<1>("h1")) @[Alu.scala 173:26]
    node _blt_T = bits(io.PcuOp, 2, 2) @[Alu.scala 174:22]
    node blt = eq(_blt_T, UInt<1>("h1")) @[Alu.scala 174:26]
    node _bge_T = bits(io.PcuOp, 3, 3) @[Alu.scala 175:22]
    node bge = eq(_bge_T, UInt<1>("h1")) @[Alu.scala 175:26]
    node _bltu_T = bits(io.PcuOp, 4, 4) @[Alu.scala 176:22]
    node bltu = eq(_bltu_T, UInt<1>("h1")) @[Alu.scala 176:26]
    node _bgeu_T = bits(io.PcuOp, 5, 5) @[Alu.scala 177:22]
    node bgeu = eq(_bgeu_T, UInt<1>("h1")) @[Alu.scala 177:26]
    node _jal_T = bits(io.PcuOp, 6, 6) @[Alu.scala 178:22]
    node jal = eq(_jal_T, UInt<1>("h1")) @[Alu.scala 178:26]
    node _jalr_T = bits(io.PcuOp, 7, 7) @[Alu.scala 179:22]
    node jalr = eq(_jalr_T, UInt<1>("h1")) @[Alu.scala 179:26]
    node equil = eq(io.PcuData1, io.PcuData2) @[Alu.scala 181:26]
    node _adder_b_T = eq(jal, UInt<1>("h0")) @[Alu.scala 184:26]
    node _adder_b_T_1 = eq(jalr, UInt<1>("h0")) @[Alu.scala 184:34]
    node _adder_b_T_2 = and(_adder_b_T, _adder_b_T_1) @[Alu.scala 184:31]
    node _adder_b_T_3 = not(io.PcuData2) @[Alu.scala 184:43]
    node adder_b = mux(_adder_b_T_2, _adder_b_T_3, io.PcuData2) @[Alu.scala 184:25]
    node _adder_cin_T = eq(jal, UInt<1>("h0")) @[Alu.scala 185:26]
    node _adder_cin_T_1 = eq(jalr, UInt<1>("h0")) @[Alu.scala 185:34]
    node _adder_cin_T_2 = and(_adder_cin_T, _adder_cin_T_1) @[Alu.scala 185:31]
    node adder_cin = mux(_adder_cin_T_2, UInt<32>("h1"), UInt<32>("h0")) @[Alu.scala 185:25]
    wire adder_cout_result : UInt<33> @[Alu.scala 186:30]
    node _adder_cout_result_T = cat(UInt<1>("h0"), io.PcuData1) @[Cat.scala 31:58]
    node _adder_cout_result_T_1 = cat(UInt<1>("h0"), adder_b) @[Cat.scala 31:58]
    node _adder_cout_result_T_2 = add(_adder_cout_result_T, _adder_cout_result_T_1) @[Alu.scala 187:46]
    node _adder_cout_result_T_3 = tail(_adder_cout_result_T_2, 1) @[Alu.scala 187:46]
    node _adder_cout_result_T_4 = cat(UInt<1>("h0"), adder_cin) @[Cat.scala 31:58]
    node _adder_cout_result_T_5 = add(_adder_cout_result_T_3, _adder_cout_result_T_4) @[Alu.scala 187:70]
    node _adder_cout_result_T_6 = tail(_adder_cout_result_T_5, 1) @[Alu.scala 187:70]
    adder_cout_result <= _adder_cout_result_T_6 @[Alu.scala 187:21]
    node adder_cout = bits(adder_cout_result, 32, 32) @[Alu.scala 189:39]
    node add_sub_result = bits(adder_cout_result, 31, 0) @[Alu.scala 190:39]
    node _slt_result_T = bits(io.PcuData1, 31, 31) @[Alu.scala 192:32]
    node _slt_result_T_1 = bits(io.PcuData2, 31, 31) @[Alu.scala 192:49]
    node _slt_result_T_2 = not(_slt_result_T_1) @[Alu.scala 192:40]
    node _slt_result_T_3 = and(_slt_result_T, _slt_result_T_2) @[Alu.scala 192:37]
    node _slt_result_T_4 = bits(io.PcuData1, 31, 31) @[Alu.scala 192:68]
    node _slt_result_T_5 = bits(io.PcuData2, 31, 31) @[Alu.scala 192:85]
    node _slt_result_T_6 = eq(_slt_result_T_4, _slt_result_T_5) @[Alu.scala 192:73]
    node _slt_result_T_7 = eq(adder_cout, UInt<1>("h0")) @[Alu.scala 192:105]
    node _slt_result_T_8 = and(_slt_result_T_6, _slt_result_T_7) @[Alu.scala 192:91]
    node slt_result = or(_slt_result_T_3, _slt_result_T_8) @[Alu.scala 192:55]
    node sltu_result = eq(adder_cout, UInt<1>("h0")) @[Alu.scala 193:34]
    when beq : @[Alu.scala 195:12]
      PcJump <= equil @[Alu.scala 196:14]
    else :
      when bne : @[Alu.scala 197:20]
        node _PcJump_T = eq(equil, UInt<1>("h0")) @[Alu.scala 198:17]
        PcJump <= _PcJump_T @[Alu.scala 198:14]
      else :
        when blt : @[Alu.scala 199:20]
          PcJump <= slt_result @[Alu.scala 200:14]
        else :
          when bge : @[Alu.scala 201:20]
            node _PcJump_T_1 = eq(slt_result, UInt<1>("h0")) @[Alu.scala 202:17]
            PcJump <= _PcJump_T_1 @[Alu.scala 202:14]
          else :
            when bltu : @[Alu.scala 203:21]
              PcJump <= sltu_result @[Alu.scala 204:14]
            else :
              when bgeu : @[Alu.scala 205:21]
                node _PcJump_T_2 = eq(sltu_result, UInt<1>("h0")) @[Alu.scala 206:17]
                PcJump <= _PcJump_T_2 @[Alu.scala 206:14]
              else :
                when jal : @[Alu.scala 207:20]
                  PcJump <= UInt<1>("h1") @[Alu.scala 208:14]
                else :
                  when jalr : @[Alu.scala 209:21]
                    PcJump <= UInt<1>("h1") @[Alu.scala 210:14]
                  else :
                    PcJump <= UInt<1>("h0") @[Alu.scala 212:14]
    node _T = or(jal, jalr) @[Alu.scala 215:15]
    when _T : @[Alu.scala 215:24]
      PcuResult <= add_sub_result @[Alu.scala 216:17]
    else :
      PcuResult <= UInt<32>("h0") @[Alu.scala 218:17]

  module Csru :
    input clock : Clock
    input reset : Reset
    output io : { flip CsrOp : UInt<6>, flip CsrData : UInt<32>, flip CsrImm : UInt<32>, CsrWData : UInt<32>, CsrWbData : UInt<32>}

    node _csrrw_T = bits(io.CsrOp, 0, 0) @[Alu.scala 240:23]
    node csrrw = eq(_csrrw_T, UInt<1>("h1")) @[Alu.scala 240:27]
    node _csrrs_T = bits(io.CsrOp, 1, 1) @[Alu.scala 241:23]
    node csrrs = eq(_csrrs_T, UInt<1>("h1")) @[Alu.scala 241:27]
    node _csrrc_T = bits(io.CsrOp, 2, 2) @[Alu.scala 242:23]
    node csrrc = eq(_csrrc_T, UInt<1>("h1")) @[Alu.scala 242:27]
    node CsrRDataS = or(io.CsrData, io.CsrImm) @[Alu.scala 247:30]
    node _CsrRDataC_T = not(io.CsrImm) @[Alu.scala 250:33]
    node CsrRDataC = and(io.CsrData, _CsrRDataC_T) @[Alu.scala 250:30]
    when csrrw : @[Alu.scala 253:16]
      io.CsrWData <= io.CsrImm @[Alu.scala 254:20]
      io.CsrWbData <= io.CsrData @[Alu.scala 255:20]
    else :
      when csrrs : @[Alu.scala 256:22]
        io.CsrWData <= CsrRDataS @[Alu.scala 257:20]
        io.CsrWbData <= io.CsrData @[Alu.scala 258:20]
      else :
        when csrrc : @[Alu.scala 259:22]
          io.CsrWData <= CsrRDataC @[Alu.scala 260:20]
          io.CsrWbData <= io.CsrData @[Alu.scala 261:20]
        else :
          io.CsrWData <= UInt<32>("h0") @[Alu.scala 263:20]
          io.CsrWbData <= UInt<32>("h0") @[Alu.scala 264:20]

  module CoreExe :
    input clock : Clock
    input reset : Reset
    output io : { Mem : { flip MemReady : UInt<1>, Result : UInt<32>, Rd : UInt<5>, WrValid : UInt<1>, DataMemValid : UInt<1>, LoadOp : UInt<5>, ExeValid : UInt<1>}, flip Id : { AluOp : UInt<10>, Data1 : UInt<32>, Data2 : UInt<32>, MmuEn : UInt<1>, MmuWen : UInt<1>, MmuOp : UInt<5>, MmuRData2 : UInt<32>, PcuEn : UInt<1>, PcuOp : UInt<8>, PcuData1 : UInt<32>, PcuData2 : UInt<32>, Rd : UInt<5>, flip ExeReady : UInt<1>, flip PcJump : UInt<1>, CsrEn : UInt<1>, CsrOp : UInt<3>, CsrWAddr : UInt<12>, CsrData : UInt<32>, CsrImm : UInt<32>, IdValid : UInt<1>}, Data : { data_sram_en : UInt<1>, data_sram_wen : UInt<1>, data_sram_addr : UInt<32>, data_sram_wdata : UInt<32>, data_size : UInt<2>}, If : { PcJump : UInt<1>}, PreIf : { PcJump : UInt<1>, NextPc : UInt<32>}, flip CsrReg : { flip CsrAddr : UInt<12>, flip CsrData : UInt<32>}, DebugResult : UInt<32>, DebugRd_r : UInt<5>, DebugDataEn : UInt<1>, DebugDataWen : UInt<1>, DebugDataWdata : UInt<32>, DebugDataSize : UInt<2>, DebugDataMemValid : UInt<1>, DebugLoadOp : UInt<5>, DebugPcJump : UInt<1>, DebugNextPc : UInt<32>, DebugCsrWAddr : UInt<12>, DebugCsrWData : UInt<32>, DebugExeValid : UInt<1>}

    inst ALU of ALU @[Core_exe.scala 63:21]
    ALU.clock <= clock
    ALU.reset <= reset
    inst Mmu of Mmu @[Core_exe.scala 64:21]
    Mmu.clock <= clock
    Mmu.reset <= reset
    inst Pcu of Pcu @[Core_exe.scala 65:21]
    Pcu.clock <= clock
    Pcu.reset <= reset
    inst Csru of Csru @[Core_exe.scala 66:21]
    Csru.clock <= clock
    Csru.reset <= reset
    reg Result : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core_exe.scala 90:31]
    reg Rd_r : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[Core_exe.scala 91:31]
    reg DataEn : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core_exe.scala 92:31]
    reg DataWen : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core_exe.scala 93:31]
    reg DataWdata : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core_exe.scala 94:31]
    reg DataSize : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Core_exe.scala 95:31]
    reg DataMemValid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core_exe.scala 96:31]
    reg LoadOp : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[Core_exe.scala 97:31]
    reg PcJump : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core_exe.scala 98:31]
    reg NextPc : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core_exe.scala 99:31]
    reg CsrWAddr : UInt<12>, clock with :
      reset => (reset, UInt<12>("h0")) @[Core_exe.scala 100:31]
    reg CsrWData : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core_exe.scala 101:31]
    reg ExeValid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core_exe.scala 102:31]
    node _ExeEn_T = eq(ExeValid, UInt<1>("h0")) @[Core_exe.scala 105:37]
    node _ExeEn_T_1 = or(io.Mem.MemReady, _ExeEn_T) @[Core_exe.scala 105:34]
    node ExeEn = and(_ExeEn_T_1, io.Id.IdValid) @[Core_exe.scala 105:48]
    ALU.io.op <= io.Id.AluOp @[Core_exe.scala 108:17]
    ALU.io.data1 <= io.Id.Data1 @[Core_exe.scala 109:17]
    ALU.io.data2 <= io.Id.Data2 @[Core_exe.scala 110:17]
    Mmu.io.MmuEn <= io.Id.MmuEn @[Core_exe.scala 113:22]
    Mmu.io.MmuWen <= io.Id.MmuWen @[Core_exe.scala 114:22]
    Mmu.io.MmuOp <= io.Id.MmuOp @[Core_exe.scala 115:22]
    Mmu.io.MmuRData2 <= io.Id.MmuRData2 @[Core_exe.scala 116:22]
    Pcu.io.PcuOp <= io.Id.PcuOp @[Core_exe.scala 118:22]
    Pcu.io.PcuData1 <= io.Id.PcuData1 @[Core_exe.scala 119:22]
    Pcu.io.PcuData2 <= io.Id.PcuData2 @[Core_exe.scala 120:22]
    Csru.io.CsrOp <= io.Id.CsrOp @[Core_exe.scala 122:22]
    Csru.io.CsrData <= io.Id.CsrData @[Core_exe.scala 123:22]
    Csru.io.CsrImm <= io.Id.CsrImm @[Core_exe.scala 124:22]
    node _io_Data_data_sram_en_T = eq(io.Mem.MemReady, UInt<1>("h0")) @[Core_exe.scala 126:41]
    node _io_Data_data_sram_en_T_1 = and(DataEn, _io_Data_data_sram_en_T) @[Core_exe.scala 126:38]
    io.Data.data_sram_en <= _io_Data_data_sram_en_T_1 @[Core_exe.scala 126:28]
    io.Data.data_sram_wen <= DataWen @[Core_exe.scala 127:28]
    io.Data.data_sram_addr <= Result @[Core_exe.scala 128:28]
    io.Data.data_sram_wdata <= DataWdata @[Core_exe.scala 129:28]
    io.Data.data_size <= DataSize @[Core_exe.scala 130:28]
    io.Mem.Result <= Result @[Core_exe.scala 133:19]
    io.Mem.Rd <= Rd_r @[Core_exe.scala 134:19]
    io.Mem.DataMemValid <= DataMemValid @[Core_exe.scala 135:25]
    node _io_Mem_WrValid_T = and(DataEn, DataWen) @[Core_exe.scala 136:35]
    io.Mem.WrValid <= _io_Mem_WrValid_T @[Core_exe.scala 136:25]
    io.Mem.LoadOp <= LoadOp @[Core_exe.scala 137:25]
    io.Mem.ExeValid <= ExeValid @[Core_exe.scala 138:25]
    io.Id.ExeReady <= ExeEn @[Core_exe.scala 142:19]
    io.Id.PcJump <= PcJump @[Core_exe.scala 143:19]
    io.If.PcJump <= PcJump @[Core_exe.scala 144:19]
    io.PreIf.PcJump <= PcJump @[Core_exe.scala 145:22]
    io.PreIf.NextPc <= NextPc @[Core_exe.scala 146:22]
    io.CsrReg.CsrAddr <= CsrWAddr @[Core_exe.scala 148:23]
    io.CsrReg.CsrData <= CsrWData @[Core_exe.scala 149:23]
    when PcJump : @[Core_exe.scala 151:18]
      Result <= UInt<32>("h0") @[Core_exe.scala 152:15]
      Rd_r <= UInt<5>("h0") @[Core_exe.scala 153:15]
      DataEn <= UInt<1>("h0") @[Core_exe.scala 154:19]
      DataWen <= UInt<1>("h0") @[Core_exe.scala 155:19]
      DataWdata <= UInt<32>("h0") @[Core_exe.scala 156:19]
      DataSize <= UInt<1>("h0") @[Core_exe.scala 157:19]
      DataMemValid <= UInt<1>("h0") @[Core_exe.scala 158:21]
      LoadOp <= UInt<5>("h0") @[Core_exe.scala 159:21]
      PcJump <= UInt<1>("h0") @[Core_exe.scala 160:21]
      NextPc <= UInt<32>("h0") @[Core_exe.scala 161:21]
      CsrWAddr <= UInt<12>("h0") @[Core_exe.scala 162:21]
      CsrWData <= UInt<32>("h0") @[Core_exe.scala 163:21]
      ExeValid <= UInt<1>("h0") @[Core_exe.scala 164:21]
    else :
      when ExeEn : @[Core_exe.scala 167:22]
        node _Result_T = mux(io.Id.PcuEn, Pcu.io.PcuResult, ALU.io.result) @[Core_exe.scala 168:56]
        node _Result_T_1 = mux(io.Id.CsrEn, Csru.io.CsrWbData, _Result_T) @[Core_exe.scala 168:22]
        Result <= _Result_T_1 @[Core_exe.scala 168:16]
        Rd_r <= io.Id.Rd @[Core_exe.scala 169:16]
        DataEn <= Mmu.io.data_sram_en @[Core_exe.scala 170:20]
        DataWen <= Mmu.io.data_sram_wen @[Core_exe.scala 171:20]
        DataWdata <= Mmu.io.data_sram_wdata @[Core_exe.scala 172:20]
        DataSize <= Mmu.io.data_size @[Core_exe.scala 173:20]
        DataMemValid <= Mmu.io.DataMemValid @[Core_exe.scala 174:22]
        LoadOp <= Mmu.io.LoadOp @[Core_exe.scala 175:22]
        PcJump <= Pcu.io.PcJump @[Core_exe.scala 176:22]
        NextPc <= ALU.io.result @[Core_exe.scala 177:22]
        CsrWAddr <= io.Id.CsrWAddr @[Core_exe.scala 178:22]
        CsrWData <= Csru.io.CsrWData @[Core_exe.scala 179:22]
        ExeValid <= UInt<1>("h1") @[Core_exe.scala 180:22]
      else :
        node _T = eq(ExeEn, UInt<1>("h0")) @[Core_exe.scala 183:28]
        node _T_1 = and(io.Mem.MemReady, _T) @[Core_exe.scala 183:25]
        when _T_1 : @[Core_exe.scala 183:35]
          ExeValid <= UInt<1>("h0") @[Core_exe.scala 184:19]
          DataEn <= UInt<1>("h0") @[Core_exe.scala 185:19]
        else :
          Result <= Result @[Core_exe.scala 187:15]
          Rd_r <= Rd_r @[Core_exe.scala 188:15]
          DataEn <= DataEn @[Core_exe.scala 189:19]
          DataWen <= DataWen @[Core_exe.scala 190:19]
          DataWdata <= DataWdata @[Core_exe.scala 191:19]
          DataSize <= DataSize @[Core_exe.scala 192:19]
          DataMemValid <= DataMemValid @[Core_exe.scala 193:21]
          LoadOp <= LoadOp @[Core_exe.scala 194:21]
          PcJump <= PcJump @[Core_exe.scala 195:21]
          NextPc <= NextPc @[Core_exe.scala 196:18]
          CsrWAddr <= CsrWAddr @[Core_exe.scala 197:21]
          CsrWData <= CsrWData @[Core_exe.scala 198:21]
          ExeValid <= ExeValid @[Core_exe.scala 199:21]
    io.DebugResult <= Result @[Core_exe.scala 202:22]
    io.DebugRd_r <= Rd_r @[Core_exe.scala 203:22]
    io.DebugDataEn <= DataEn @[Core_exe.scala 204:22]
    io.DebugDataWen <= DataWen @[Core_exe.scala 205:22]
    io.DebugDataWdata <= DataWdata @[Core_exe.scala 206:22]
    io.DebugDataSize <= DataSize @[Core_exe.scala 207:22]
    io.DebugDataMemValid <= DataMemValid @[Core_exe.scala 208:22]
    io.DebugLoadOp <= LoadOp @[Core_exe.scala 209:22]
    io.DebugPcJump <= PcJump @[Core_exe.scala 210:22]
    io.DebugNextPc <= NextPc @[Core_exe.scala 211:22]
    io.DebugCsrWAddr <= CsrWAddr @[Core_exe.scala 212:22]
    io.DebugCsrWData <= CsrWData @[Core_exe.scala 213:22]
    io.DebugExeValid <= ExeValid @[Core_exe.scala 214:22]

  module CoreMem :
    input clock : Clock
    input reset : Reset
    output io : { flip Exe : { flip MemReady : UInt<1>, Result : UInt<32>, Rd : UInt<5>, WrValid : UInt<1>, DataMemValid : UInt<1>, LoadOp : UInt<5>, ExeValid : UInt<1>}, Wb : { WData : UInt<32>, Rd : UInt<5>, flip WbReady : UInt<1>}, Data : { flip data_sram_rdata : UInt<32>, flip data_ok : UInt<1>, flip data_addr_ok : UInt<1>}, DebugWData : UInt<32>, DebugRd_r : UInt<5>}

    reg WData : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core_mem.scala 45:20]
    reg Rd_r : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[Core_mem.scala 46:20]
    wire WbData : UInt<32> @[Core_mem.scala 50:20]
    node _MemEn_T = and(io.Exe.ExeValid, io.Wb.WbReady) @[Core_mem.scala 52:25]
    node _MemEn_T_1 = eq(io.Exe.DataMemValid, UInt<1>("h0")) @[Core_mem.scala 52:51]
    node _MemEn_T_2 = or(io.Data.data_ok, _MemEn_T_1) @[Core_mem.scala 52:48]
    node _MemEn_T_3 = eq(io.Exe.WrValid, UInt<1>("h0")) @[Core_mem.scala 52:80]
    node _MemEn_T_4 = or(io.Data.data_addr_ok, _MemEn_T_3) @[Core_mem.scala 52:77]
    node _MemEn_T_5 = and(_MemEn_T_2, _MemEn_T_4) @[Core_mem.scala 52:66]
    node MemEn = and(_MemEn_T, _MemEn_T_5) @[Core_mem.scala 52:36]
    node _ByteS_T = bits(io.Exe.LoadOp, 0, 0) @[Core_mem.scala 55:21]
    node ByteS = eq(_ByteS_T, UInt<1>("h1")) @[Core_mem.scala 55:25]
    node _HalfS_T = bits(io.Exe.LoadOp, 1, 1) @[Core_mem.scala 56:21]
    node HalfS = eq(_HalfS_T, UInt<1>("h1")) @[Core_mem.scala 56:25]
    node _WordS_T = bits(io.Exe.LoadOp, 2, 2) @[Core_mem.scala 57:21]
    node WordS = eq(_WordS_T, UInt<1>("h1")) @[Core_mem.scala 57:25]
    node _ByteU_T = bits(io.Exe.LoadOp, 3, 3) @[Core_mem.scala 58:21]
    node ByteU = eq(_ByteU_T, UInt<1>("h1")) @[Core_mem.scala 58:25]
    node _HalfU_T = bits(io.Exe.LoadOp, 4, 4) @[Core_mem.scala 59:21]
    node HalfU = eq(_HalfU_T, UInt<1>("h1")) @[Core_mem.scala 59:25]
    when io.Exe.DataMemValid : @[Core_mem.scala 61:21]
      when ByteS : @[Core_mem.scala 62:16]
        node _WbData_T = bits(io.Data.data_sram_rdata, 7, 7) @[Core_mem.scala 63:39]
        node _WbData_T_1 = bits(_WbData_T, 0, 0) @[Bitwise.scala 74:15]
        node _WbData_T_2 = mux(_WbData_T_1, UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 74:12]
        node _WbData_T_3 = bits(io.Data.data_sram_rdata, 7, 0) @[Core_mem.scala 63:54]
        node _WbData_T_4 = cat(_WbData_T_2, _WbData_T_3) @[Cat.scala 31:58]
        WbData <= _WbData_T_4 @[Core_mem.scala 63:14]
      else :
        when HalfS : @[Core_mem.scala 64:22]
          node _WbData_T_5 = bits(io.Data.data_sram_rdata, 15, 15) @[Core_mem.scala 65:39]
          node _WbData_T_6 = bits(_WbData_T_5, 0, 0) @[Bitwise.scala 74:15]
          node _WbData_T_7 = mux(_WbData_T_6, UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 74:12]
          node _WbData_T_8 = bits(io.Data.data_sram_rdata, 15, 0) @[Core_mem.scala 65:55]
          node _WbData_T_9 = cat(_WbData_T_7, _WbData_T_8) @[Cat.scala 31:58]
          WbData <= _WbData_T_9 @[Core_mem.scala 65:14]
        else :
          when WordS : @[Core_mem.scala 66:22]
            node _WbData_T_10 = bits(io.Data.data_sram_rdata, 31, 0) @[Core_mem.scala 67:27]
            WbData <= _WbData_T_10 @[Core_mem.scala 67:14]
          else :
            when ByteU : @[Core_mem.scala 68:22]
              node _WbData_T_11 = mux(UInt<1>("h0"), UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 74:12]
              node _WbData_T_12 = bits(io.Data.data_sram_rdata, 7, 0) @[Core_mem.scala 69:49]
              node _WbData_T_13 = cat(_WbData_T_11, _WbData_T_12) @[Cat.scala 31:58]
              WbData <= _WbData_T_13 @[Core_mem.scala 69:14]
            else :
              when HalfU : @[Core_mem.scala 70:22]
                node _WbData_T_14 = mux(UInt<1>("h0"), UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 74:12]
                node _WbData_T_15 = bits(io.Data.data_sram_rdata, 15, 0) @[Core_mem.scala 71:49]
                node _WbData_T_16 = cat(_WbData_T_14, _WbData_T_15) @[Cat.scala 31:58]
                WbData <= _WbData_T_16 @[Core_mem.scala 71:14]
              else :
                WbData <= UInt<32>("h0") @[Core_mem.scala 73:14]
    else :
      WbData <= io.Exe.Result @[Core_mem.scala 76:14]
    when MemEn : @[Core_mem.scala 80:12]
      WData <= WbData @[Core_mem.scala 81:11]
      Rd_r <= io.Exe.Rd @[Core_mem.scala 82:11]
    else :
      WData <= WData @[Core_mem.scala 88:11]
      Rd_r <= Rd_r @[Core_mem.scala 89:11]
    io.Exe.MemReady <= MemEn @[Core_mem.scala 95:17]
    io.Wb.WData <= WData @[Core_mem.scala 96:17]
    io.Wb.Rd <= Rd_r @[Core_mem.scala 97:17]
    io.DebugWData <= WData @[Core_mem.scala 98:22]
    io.DebugRd_r <= Rd_r @[Core_mem.scala 99:22]

  module CoreWb :
    input clock : Clock
    input reset : Reset
    output io : { flip Mem : { WData : UInt<32>, Rd : UInt<5>, flip WbReady : UInt<1>}, flip RegFile : { flip Rd : UInt<5>, flip WData : UInt<32>}}

    io.RegFile.Rd <= io.Mem.Rd @[Core_wb.scala 13:18]
    io.RegFile.WData <= io.Mem.WData @[Core_wb.scala 14:18]
    io.Mem.WbReady <= UInt<1>("h1") @[Core_wb.scala 16:18]

  module RegFile :
    input clock : Clock
    input reset : Reset
    output io : { Id : { flip Rs1 : UInt<5>, flip Rs2 : UInt<5>, flip Rd : UInt<5>, RData1 : UInt<32>, RData2 : UInt<32>, RValid : UInt<1>}, Wb : { flip Rd : UInt<5>, flip WData : UInt<32>}}

    wire _RegStack_WIRE : UInt<32>[32] @[RegFile.scala 28:33]
    _RegStack_WIRE[0] <= UInt<32>("h0") @[RegFile.scala 28:33]
    _RegStack_WIRE[1] <= UInt<32>("h0") @[RegFile.scala 28:33]
    _RegStack_WIRE[2] <= UInt<32>("h0") @[RegFile.scala 28:33]
    _RegStack_WIRE[3] <= UInt<32>("h0") @[RegFile.scala 28:33]
    _RegStack_WIRE[4] <= UInt<32>("h0") @[RegFile.scala 28:33]
    _RegStack_WIRE[5] <= UInt<32>("h0") @[RegFile.scala 28:33]
    _RegStack_WIRE[6] <= UInt<32>("h0") @[RegFile.scala 28:33]
    _RegStack_WIRE[7] <= UInt<32>("h0") @[RegFile.scala 28:33]
    _RegStack_WIRE[8] <= UInt<32>("h0") @[RegFile.scala 28:33]
    _RegStack_WIRE[9] <= UInt<32>("h0") @[RegFile.scala 28:33]
    _RegStack_WIRE[10] <= UInt<32>("h0") @[RegFile.scala 28:33]
    _RegStack_WIRE[11] <= UInt<32>("h0") @[RegFile.scala 28:33]
    _RegStack_WIRE[12] <= UInt<32>("h0") @[RegFile.scala 28:33]
    _RegStack_WIRE[13] <= UInt<32>("h0") @[RegFile.scala 28:33]
    _RegStack_WIRE[14] <= UInt<32>("h0") @[RegFile.scala 28:33]
    _RegStack_WIRE[15] <= UInt<32>("h0") @[RegFile.scala 28:33]
    _RegStack_WIRE[16] <= UInt<32>("h0") @[RegFile.scala 28:33]
    _RegStack_WIRE[17] <= UInt<32>("h0") @[RegFile.scala 28:33]
    _RegStack_WIRE[18] <= UInt<32>("h0") @[RegFile.scala 28:33]
    _RegStack_WIRE[19] <= UInt<32>("h0") @[RegFile.scala 28:33]
    _RegStack_WIRE[20] <= UInt<32>("h0") @[RegFile.scala 28:33]
    _RegStack_WIRE[21] <= UInt<32>("h0") @[RegFile.scala 28:33]
    _RegStack_WIRE[22] <= UInt<32>("h0") @[RegFile.scala 28:33]
    _RegStack_WIRE[23] <= UInt<32>("h0") @[RegFile.scala 28:33]
    _RegStack_WIRE[24] <= UInt<32>("h0") @[RegFile.scala 28:33]
    _RegStack_WIRE[25] <= UInt<32>("h0") @[RegFile.scala 28:33]
    _RegStack_WIRE[26] <= UInt<32>("h0") @[RegFile.scala 28:33]
    _RegStack_WIRE[27] <= UInt<32>("h0") @[RegFile.scala 28:33]
    _RegStack_WIRE[28] <= UInt<32>("h0") @[RegFile.scala 28:33]
    _RegStack_WIRE[29] <= UInt<32>("h0") @[RegFile.scala 28:33]
    _RegStack_WIRE[30] <= UInt<32>("h0") @[RegFile.scala 28:33]
    _RegStack_WIRE[31] <= UInt<32>("h0") @[RegFile.scala 28:33]
    reg RegStack : UInt<32>[32], clock with :
      reset => (reset, _RegStack_WIRE) @[RegFile.scala 28:25]
    wire _RegDirty_WIRE : UInt<1>[32] @[RegFile.scala 29:33]
    _RegDirty_WIRE[0] <= UInt<1>("h0") @[RegFile.scala 29:33]
    _RegDirty_WIRE[1] <= UInt<1>("h0") @[RegFile.scala 29:33]
    _RegDirty_WIRE[2] <= UInt<1>("h0") @[RegFile.scala 29:33]
    _RegDirty_WIRE[3] <= UInt<1>("h0") @[RegFile.scala 29:33]
    _RegDirty_WIRE[4] <= UInt<1>("h0") @[RegFile.scala 29:33]
    _RegDirty_WIRE[5] <= UInt<1>("h0") @[RegFile.scala 29:33]
    _RegDirty_WIRE[6] <= UInt<1>("h0") @[RegFile.scala 29:33]
    _RegDirty_WIRE[7] <= UInt<1>("h0") @[RegFile.scala 29:33]
    _RegDirty_WIRE[8] <= UInt<1>("h0") @[RegFile.scala 29:33]
    _RegDirty_WIRE[9] <= UInt<1>("h0") @[RegFile.scala 29:33]
    _RegDirty_WIRE[10] <= UInt<1>("h0") @[RegFile.scala 29:33]
    _RegDirty_WIRE[11] <= UInt<1>("h0") @[RegFile.scala 29:33]
    _RegDirty_WIRE[12] <= UInt<1>("h0") @[RegFile.scala 29:33]
    _RegDirty_WIRE[13] <= UInt<1>("h0") @[RegFile.scala 29:33]
    _RegDirty_WIRE[14] <= UInt<1>("h0") @[RegFile.scala 29:33]
    _RegDirty_WIRE[15] <= UInt<1>("h0") @[RegFile.scala 29:33]
    _RegDirty_WIRE[16] <= UInt<1>("h0") @[RegFile.scala 29:33]
    _RegDirty_WIRE[17] <= UInt<1>("h0") @[RegFile.scala 29:33]
    _RegDirty_WIRE[18] <= UInt<1>("h0") @[RegFile.scala 29:33]
    _RegDirty_WIRE[19] <= UInt<1>("h0") @[RegFile.scala 29:33]
    _RegDirty_WIRE[20] <= UInt<1>("h0") @[RegFile.scala 29:33]
    _RegDirty_WIRE[21] <= UInt<1>("h0") @[RegFile.scala 29:33]
    _RegDirty_WIRE[22] <= UInt<1>("h0") @[RegFile.scala 29:33]
    _RegDirty_WIRE[23] <= UInt<1>("h0") @[RegFile.scala 29:33]
    _RegDirty_WIRE[24] <= UInt<1>("h0") @[RegFile.scala 29:33]
    _RegDirty_WIRE[25] <= UInt<1>("h0") @[RegFile.scala 29:33]
    _RegDirty_WIRE[26] <= UInt<1>("h0") @[RegFile.scala 29:33]
    _RegDirty_WIRE[27] <= UInt<1>("h0") @[RegFile.scala 29:33]
    _RegDirty_WIRE[28] <= UInt<1>("h0") @[RegFile.scala 29:33]
    _RegDirty_WIRE[29] <= UInt<1>("h0") @[RegFile.scala 29:33]
    _RegDirty_WIRE[30] <= UInt<1>("h0") @[RegFile.scala 29:33]
    _RegDirty_WIRE[31] <= UInt<1>("h0") @[RegFile.scala 29:33]
    reg RegDirty : UInt<1>[32], clock with :
      reset => (reset, _RegDirty_WIRE) @[RegFile.scala 29:25]
    node _RValid1_T = eq(io.Id.Rs1, UInt<1>("h0")) @[RegFile.scala 41:26]
    node _RValid1_T_1 = eq(RegDirty[io.Id.Rs1], UInt<1>("h0")) @[RegFile.scala 41:41]
    node RValid1 = mux(_RValid1_T, UInt<1>("h1"), _RValid1_T_1) @[RegFile.scala 41:21]
    node _RValid2_T = eq(io.Id.Rs2, UInt<1>("h0")) @[RegFile.scala 42:26]
    node _RValid2_T_1 = eq(RegDirty[io.Id.Rs2], UInt<1>("h0")) @[RegFile.scala 42:41]
    node RValid2 = mux(_RValid2_T, UInt<1>("h1"), _RValid2_T_1) @[RegFile.scala 42:21]
    node _io_Id_RValid_T = and(RValid1, RValid2) @[RegFile.scala 44:27]
    io.Id.RValid <= _io_Id_RValid_T @[RegFile.scala 44:16]
    node _io_Id_RData1_T = eq(RegDirty[io.Id.Rs1], UInt<1>("h0")) @[RegFile.scala 45:23]
    node _io_Id_RData1_T_1 = mux(_io_Id_RData1_T, RegStack[io.Id.Rs1], UInt<1>("h0")) @[RegFile.scala 45:22]
    io.Id.RData1 <= _io_Id_RData1_T_1 @[RegFile.scala 45:16]
    node _io_Id_RData2_T = eq(RegDirty[io.Id.Rs2], UInt<1>("h0")) @[RegFile.scala 46:23]
    node _io_Id_RData2_T_1 = mux(_io_Id_RData2_T, RegStack[io.Id.Rs2], UInt<1>("h0")) @[RegFile.scala 46:22]
    io.Id.RData2 <= _io_Id_RData2_T_1 @[RegFile.scala 46:16]
    node _RegStack_T = eq(io.Wb.Rd, UInt<1>("h0")) @[RegFile.scala 48:29]
    node _RegStack_T_1 = mux(_RegStack_T, UInt<1>("h0"), io.Wb.WData) @[RegFile.scala 48:23]
    RegStack[io.Wb.Rd] <= _RegStack_T_1 @[RegFile.scala 48:18]
    node _RegDirty_T = eq(io.Id.Rd, UInt<1>("h0")) @[RegFile.scala 52:32]
    node _RegDirty_T_1 = mux(_RegDirty_T, UInt<1>("h0"), UInt<1>("h1")) @[RegFile.scala 52:26]
    RegDirty[io.Id.Rd] <= _RegDirty_T_1 @[RegFile.scala 52:20]
    RegDirty[io.Wb.Rd] <= UInt<1>("h0") @[RegFile.scala 53:20]

  module CsrReg :
    input clock : Clock
    input reset : Reset
    output io : { Id : { flip CsrAddr : UInt<12>, CsrData : UInt<32>}, Exe : { flip CsrAddr : UInt<12>, flip CsrData : UInt<32>}}

    wire RData : UInt<32> @[CsrReg.scala 25:18]
    RData <= UInt<32>("h0") @[CsrReg.scala 27:7]
    io.Id.CsrData <= RData @[CsrReg.scala 28:15]
    reg fflags : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CsrReg.scala 30:21]
    reg frm : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CsrReg.scala 31:21]
    reg fcsr : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CsrReg.scala 32:21]
    reg mstatus : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CsrReg.scala 34:23]
    reg misa : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CsrReg.scala 35:23]
    reg mie : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CsrReg.scala 36:23]
    reg mtvec : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CsrReg.scala 37:23]
    reg mscratch : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CsrReg.scala 38:23]
    reg mepc : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CsrReg.scala 39:23]
    reg mcause : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CsrReg.scala 40:23]
    reg mtval : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CsrReg.scala 41:23]
    reg mip : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CsrReg.scala 42:23]
    reg mcycle : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CsrReg.scala 43:23]
    reg mcycleh : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CsrReg.scala 44:23]
    reg minstret : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CsrReg.scala 45:23]
    reg minstreth : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CsrReg.scala 46:23]
    reg mvendorid : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CsrReg.scala 48:23]
    reg marchid : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CsrReg.scala 49:23]
    reg mimpid : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CsrReg.scala 50:23]
    reg mhartid : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CsrReg.scala 51:23]
    node _T = eq(UInt<1>("h1"), io.Exe.CsrAddr) @[CsrReg.scala 53:14]
    when _T : @[CsrReg.scala 53:14]
      fflags <= io.Exe.CsrData @[CsrReg.scala 55:14]
    else :
      node _T_1 = eq(UInt<2>("h2"), io.Exe.CsrAddr) @[CsrReg.scala 53:14]
      when _T_1 : @[CsrReg.scala 53:14]
        frm <= io.Exe.CsrData @[CsrReg.scala 58:14]
      else :
        node _T_2 = eq(UInt<2>("h3"), io.Exe.CsrAddr) @[CsrReg.scala 53:14]
        when _T_2 : @[CsrReg.scala 53:14]
          fcsr <= io.Exe.CsrData @[CsrReg.scala 61:14]
        else :
          node _T_3 = eq(UInt<10>("h300"), io.Exe.CsrAddr) @[CsrReg.scala 53:14]
          when _T_3 : @[CsrReg.scala 53:14]
            mstatus <= io.Exe.CsrData @[CsrReg.scala 64:14]
          else :
            node _T_4 = eq(UInt<10>("h301"), io.Exe.CsrAddr) @[CsrReg.scala 53:14]
            when _T_4 : @[CsrReg.scala 53:14]
              misa <= io.Exe.CsrData @[CsrReg.scala 67:14]
            else :
              node _T_5 = eq(UInt<10>("h304"), io.Exe.CsrAddr) @[CsrReg.scala 53:14]
              when _T_5 : @[CsrReg.scala 53:14]
                mie <= io.Exe.CsrData @[CsrReg.scala 70:14]
              else :
                node _T_6 = eq(UInt<10>("h305"), io.Exe.CsrAddr) @[CsrReg.scala 53:14]
                when _T_6 : @[CsrReg.scala 53:14]
                  mtvec <= io.Exe.CsrData @[CsrReg.scala 73:14]
                else :
                  node _T_7 = eq(UInt<10>("h340"), io.Exe.CsrAddr) @[CsrReg.scala 53:14]
                  when _T_7 : @[CsrReg.scala 53:14]
                    mscratch <= io.Exe.CsrData @[CsrReg.scala 76:16]
                  else :
                    node _T_8 = eq(UInt<10>("h341"), io.Exe.CsrAddr) @[CsrReg.scala 53:14]
                    when _T_8 : @[CsrReg.scala 53:14]
                      mepc <= io.Exe.CsrData @[CsrReg.scala 79:15]
                    else :
                      node _T_9 = eq(UInt<10>("h342"), io.Exe.CsrAddr) @[CsrReg.scala 53:14]
                      when _T_9 : @[CsrReg.scala 53:14]
                        mcause <= io.Exe.CsrData @[CsrReg.scala 82:15]
                      else :
                        node _T_10 = eq(UInt<10>("h343"), io.Exe.CsrAddr) @[CsrReg.scala 53:14]
                        when _T_10 : @[CsrReg.scala 53:14]
                          mtval <= io.Exe.CsrData @[CsrReg.scala 85:15]
                        else :
                          node _T_11 = eq(UInt<10>("h344"), io.Exe.CsrAddr) @[CsrReg.scala 53:14]
                          when _T_11 : @[CsrReg.scala 53:14]
                            mip <= io.Exe.CsrData @[CsrReg.scala 88:15]
                          else :
                            node _T_12 = eq(UInt<12>("hb00"), io.Exe.CsrAddr) @[CsrReg.scala 53:14]
                            when _T_12 : @[CsrReg.scala 53:14]
                              mcycle <= io.Exe.CsrData @[CsrReg.scala 91:15]
                            else :
                              node _T_13 = eq(UInt<12>("hb80"), io.Exe.CsrAddr) @[CsrReg.scala 53:14]
                              when _T_13 : @[CsrReg.scala 53:14]
                                mcycleh <= io.Exe.CsrData @[CsrReg.scala 94:17]
                              else :
                                node _T_14 = eq(UInt<12>("hb02"), io.Exe.CsrAddr) @[CsrReg.scala 53:14]
                                when _T_14 : @[CsrReg.scala 53:14]
                                  minstret <= io.Exe.CsrData @[CsrReg.scala 97:17]
                                else :
                                  node _T_15 = eq(UInt<12>("hb82"), io.Exe.CsrAddr) @[CsrReg.scala 53:14]
                                  when _T_15 : @[CsrReg.scala 53:14]
                                    minstreth <= io.Exe.CsrData @[CsrReg.scala 100:19]
                                  else :
                                    node _T_16 = eq(UInt<12>("hf11"), io.Exe.CsrAddr) @[CsrReg.scala 53:14]
                                    when _T_16 : @[CsrReg.scala 53:14]
                                      mvendorid <= io.Exe.CsrData @[CsrReg.scala 103:17]
                                    else :
                                      node _T_17 = eq(UInt<12>("hf12"), io.Exe.CsrAddr) @[CsrReg.scala 53:14]
                                      when _T_17 : @[CsrReg.scala 53:14]
                                        marchid <= io.Exe.CsrData @[CsrReg.scala 106:16]
                                      else :
                                        node _T_18 = eq(UInt<12>("hf13"), io.Exe.CsrAddr) @[CsrReg.scala 53:14]
                                        when _T_18 : @[CsrReg.scala 53:14]
                                          mimpid <= io.Exe.CsrData @[CsrReg.scala 109:15]
                                        else :
                                          node _T_19 = eq(UInt<12>("hf14"), io.Exe.CsrAddr) @[CsrReg.scala 53:14]
                                          when _T_19 : @[CsrReg.scala 53:14]
                                            mhartid <= io.Exe.CsrData @[CsrReg.scala 112:16]
    node _T_20 = eq(io.Id.CsrAddr, io.Exe.CsrAddr) @[CsrReg.scala 116:13]
    when _T_20 : @[CsrReg.scala 116:23]
      RData <= io.Exe.CsrData @[CsrReg.scala 117:11]
    else :
      node _T_21 = eq(UInt<1>("h1"), io.Id.CsrAddr) @[CsrReg.scala 119:18]
      when _T_21 : @[CsrReg.scala 119:18]
        RData <= fflags @[CsrReg.scala 121:13]
      else :
        node _T_22 = eq(UInt<2>("h2"), io.Id.CsrAddr) @[CsrReg.scala 119:18]
        when _T_22 : @[CsrReg.scala 119:18]
          RData <= frm @[CsrReg.scala 124:13]
        else :
          node _T_23 = eq(UInt<2>("h3"), io.Id.CsrAddr) @[CsrReg.scala 119:18]
          when _T_23 : @[CsrReg.scala 119:18]
            RData <= fcsr @[CsrReg.scala 127:13]
          else :
            node _T_24 = eq(UInt<10>("h300"), io.Id.CsrAddr) @[CsrReg.scala 119:18]
            when _T_24 : @[CsrReg.scala 119:18]
              RData <= mstatus @[CsrReg.scala 130:13]
            else :
              node _T_25 = eq(UInt<10>("h301"), io.Id.CsrAddr) @[CsrReg.scala 119:18]
              when _T_25 : @[CsrReg.scala 119:18]
                RData <= misa @[CsrReg.scala 133:13]
              else :
                node _T_26 = eq(UInt<10>("h304"), io.Id.CsrAddr) @[CsrReg.scala 119:18]
                when _T_26 : @[CsrReg.scala 119:18]
                  RData <= mie @[CsrReg.scala 136:13]
                else :
                  node _T_27 = eq(UInt<10>("h305"), io.Id.CsrAddr) @[CsrReg.scala 119:18]
                  when _T_27 : @[CsrReg.scala 119:18]
                    RData <= mtvec @[CsrReg.scala 139:13]
                  else :
                    node _T_28 = eq(UInt<10>("h340"), io.Id.CsrAddr) @[CsrReg.scala 119:18]
                    when _T_28 : @[CsrReg.scala 119:18]
                      RData <= mscratch @[CsrReg.scala 142:13]
                    else :
                      node _T_29 = eq(UInt<10>("h341"), io.Id.CsrAddr) @[CsrReg.scala 119:18]
                      when _T_29 : @[CsrReg.scala 119:18]
                        RData <= mepc @[CsrReg.scala 145:13]
                      else :
                        node _T_30 = eq(UInt<10>("h342"), io.Id.CsrAddr) @[CsrReg.scala 119:18]
                        when _T_30 : @[CsrReg.scala 119:18]
                          RData <= mcause @[CsrReg.scala 148:13]
                        else :
                          node _T_31 = eq(UInt<10>("h343"), io.Id.CsrAddr) @[CsrReg.scala 119:18]
                          when _T_31 : @[CsrReg.scala 119:18]
                            RData <= mtval @[CsrReg.scala 151:13]
                          else :
                            node _T_32 = eq(UInt<10>("h344"), io.Id.CsrAddr) @[CsrReg.scala 119:18]
                            when _T_32 : @[CsrReg.scala 119:18]
                              RData <= mip @[CsrReg.scala 154:13]
                            else :
                              node _T_33 = eq(UInt<12>("hb00"), io.Id.CsrAddr) @[CsrReg.scala 119:18]
                              when _T_33 : @[CsrReg.scala 119:18]
                                RData <= mcycle @[CsrReg.scala 157:13]
                              else :
                                node _T_34 = eq(UInt<12>("hb80"), io.Id.CsrAddr) @[CsrReg.scala 119:18]
                                when _T_34 : @[CsrReg.scala 119:18]
                                  RData <= mcycleh @[CsrReg.scala 160:14]
                                else :
                                  node _T_35 = eq(UInt<12>("hb02"), io.Id.CsrAddr) @[CsrReg.scala 119:18]
                                  when _T_35 : @[CsrReg.scala 119:18]
                                    RData <= minstret @[CsrReg.scala 163:13]
                                  else :
                                    node _T_36 = eq(UInt<12>("hb82"), io.Id.CsrAddr) @[CsrReg.scala 119:18]
                                    when _T_36 : @[CsrReg.scala 119:18]
                                      RData <= minstreth @[CsrReg.scala 166:13]
                                    else :
                                      node _T_37 = eq(UInt<12>("hf11"), io.Id.CsrAddr) @[CsrReg.scala 119:18]
                                      when _T_37 : @[CsrReg.scala 119:18]
                                        RData <= mvendorid @[CsrReg.scala 169:13]
                                      else :
                                        node _T_38 = eq(UInt<12>("hf12"), io.Id.CsrAddr) @[CsrReg.scala 119:18]
                                        when _T_38 : @[CsrReg.scala 119:18]
                                          RData <= marchid @[CsrReg.scala 172:13]
                                        else :
                                          node _T_39 = eq(UInt<12>("hf13"), io.Id.CsrAddr) @[CsrReg.scala 119:18]
                                          when _T_39 : @[CsrReg.scala 119:18]
                                            RData <= mimpid @[CsrReg.scala 175:13]
                                          else :
                                            node _T_40 = eq(UInt<12>("hf14"), io.Id.CsrAddr) @[CsrReg.scala 119:18]
                                            when _T_40 : @[CsrReg.scala 119:18]
                                              RData <= mhartid @[CsrReg.scala 178:13]

  module CoreTop :
    input clock : Clock
    input reset : Reset
    output io : { Axi : { ExeData : { data_sram_en : UInt<1>, data_sram_wen : UInt<1>, data_sram_addr : UInt<32>, data_sram_wdata : UInt<32>, data_size : UInt<2>}, DataMem : { flip data_sram_rdata : UInt<32>, flip data_ok : UInt<1>, flip data_addr_ok : UInt<1>}}, Instr : { PreIfInstr : { inst_sram_en : UInt<1>, inst_sram_wen : UInt<4>, inst_sram_addr : UInt<32>, inst_sram_wdata : UInt<32>}, InstrIf : { flip inst_sram_rdata : UInt<32>}}, Debug : { DebugInstr : UInt<32>, DebugPc : UInt<32>, DebugIfValid : UInt<1>, DebugIfEn : UInt<1>, Debug_alu_op : UInt<10>, Debug_data1 : UInt<32>, Debug_data2 : UInt<32>, Debug_mmu_en : UInt<1>, Debug_mmu_wen : UInt<1>, Debug_mmu_op : UInt<5>, Debug_mmu_RData2 : UInt<32>, Debug_pcu_en : UInt<1>, Debug_pcu_op : UInt<8>, Debug_pcu_data1 : UInt<32>, Debug_pcu_data2 : UInt<32>, Debug_rd_r : UInt<5>, Debug_csr_en : UInt<1>, Debug_csr_op : UInt<3>, Debug_csr_waddr : UInt<12>, Debug_csr_data : UInt<32>, Debug_csr_imm : UInt<32>, Debug_IdValid : UInt<1>, DebugResult : UInt<32>, DebugRd_r : UInt<5>, DebugDataEn : UInt<1>, DebugDataWen : UInt<1>, DebugDataWdata : UInt<32>, DebugDataSize : UInt<2>, DebugDataMemValid : UInt<1>, DebugLoadOp : UInt<5>, DebugPcJump : UInt<1>, DebugNextPc : UInt<32>, DebugCsrWAddr : UInt<12>, DebugCsrWData : UInt<32>, DebugExeValid : UInt<1>, DebugWData : UInt<32>, DebugMemRd_r : UInt<5>}}

    inst CorePreIf of CorePreIf @[Core_top.scala 75:27]
    CorePreIf.clock <= clock
    CorePreIf.reset <= reset
    inst CoreIf of CoreIf @[Core_top.scala 76:27]
    CoreIf.clock <= clock
    CoreIf.reset <= reset
    inst CoreId of CoreId @[Core_top.scala 77:27]
    CoreId.clock <= clock
    CoreId.reset <= reset
    inst CoreExe of CoreExe @[Core_top.scala 78:27]
    CoreExe.clock <= clock
    CoreExe.reset <= reset
    inst CoreMem of CoreMem @[Core_top.scala 79:27]
    CoreMem.clock <= clock
    CoreMem.reset <= reset
    inst CoreWb of CoreWb @[Core_top.scala 80:27]
    CoreWb.clock <= clock
    CoreWb.reset <= reset
    inst RegFile of RegFile @[Core_top.scala 81:27]
    RegFile.clock <= clock
    RegFile.reset <= reset
    inst CsrReg of CsrReg @[Core_top.scala 82:27]
    CsrReg.clock <= clock
    CsrReg.reset <= reset
    io.Instr.PreIfInstr.inst_sram_en <= CorePreIf.io.Instr.inst_sram_en @[Core_top.scala 84:43]
    io.Instr.PreIfInstr.inst_sram_wen <= CorePreIf.io.Instr.inst_sram_wen @[Core_top.scala 85:43]
    io.Instr.PreIfInstr.inst_sram_addr <= CorePreIf.io.Instr.inst_sram_addr @[Core_top.scala 86:43]
    io.Instr.PreIfInstr.inst_sram_wdata <= CorePreIf.io.Instr.inst_sram_wdata @[Core_top.scala 87:43]
    CoreIf.io.Instr.inst_sram_rdata <= io.Instr.InstrIf.inst_sram_rdata @[Core_top.scala 88:37]
    io.Axi.ExeData.data_sram_en <= CoreExe.io.Data.data_sram_en @[Core_top.scala 90:35]
    io.Axi.ExeData.data_sram_wen <= CoreExe.io.Data.data_sram_wen @[Core_top.scala 91:35]
    io.Axi.ExeData.data_sram_addr <= CoreExe.io.Data.data_sram_addr @[Core_top.scala 92:35]
    io.Axi.ExeData.data_sram_wdata <= CoreExe.io.Data.data_sram_wdata @[Core_top.scala 93:35]
    io.Axi.ExeData.data_size <= CoreExe.io.Data.data_size @[Core_top.scala 94:35]
    CoreMem.io.Data.data_addr_ok <= io.Axi.DataMem.data_addr_ok @[Core_top.scala 96:37]
    CoreMem.io.Data.data_ok <= io.Axi.DataMem.data_ok @[Core_top.scala 97:37]
    CoreMem.io.Data.data_sram_rdata <= io.Axi.DataMem.data_sram_rdata @[Core_top.scala 98:37]
    CoreIf.io.PreIf <= CorePreIf.io.If @[Core_top.scala 100:21]
    CoreId.io.If <= CoreIf.io.Id @[Core_top.scala 102:18]
    CoreExe.io.Id <= CoreId.io.Exe @[Core_top.scala 103:19]
    CoreId.io.RegFile <= RegFile.io.Id @[Core_top.scala 104:23]
    CoreMem.io.Exe <= CoreExe.io.Mem @[Core_top.scala 105:20]
    CoreWb.io.Mem <= CoreMem.io.Wb @[Core_top.scala 106:20]
    RegFile.io.Wb.WData <= CoreWb.io.RegFile.WData @[Core_top.scala 107:23]
    RegFile.io.Wb.Rd <= CoreWb.io.RegFile.Rd @[Core_top.scala 107:23]
    CoreIf.io.Exe <= CoreExe.io.If @[Core_top.scala 109:19]
    CorePreIf.io.Exe <= CoreExe.io.PreIf @[Core_top.scala 110:22]
    CoreId.io.CsrReg <= CsrReg.io.Id @[Core_top.scala 112:19]
    CsrReg.io.Exe.CsrData <= CoreExe.io.CsrReg.CsrData @[Core_top.scala 113:19]
    CsrReg.io.Exe.CsrAddr <= CoreExe.io.CsrReg.CsrAddr @[Core_top.scala 113:19]
    io.Debug.DebugInstr <= CoreIf.io.DebugInstr @[Core_top.scala 116:26]
    io.Debug.DebugPc <= CoreIf.io.DebugPc @[Core_top.scala 117:26]
    io.Debug.DebugIfValid <= CoreIf.io.DebugIfValid @[Core_top.scala 118:26]
    io.Debug.DebugIfEn <= CoreIf.io.DebugIfEn @[Core_top.scala 119:26]
    io.Debug.Debug_alu_op <= CoreId.io.Debug_alu_op @[Core_top.scala 121:26]
    io.Debug.Debug_data1 <= CoreId.io.Debug_data1 @[Core_top.scala 122:26]
    io.Debug.Debug_data2 <= CoreId.io.Debug_data2 @[Core_top.scala 123:26]
    io.Debug.Debug_mmu_en <= CoreId.io.Debug_mmu_en @[Core_top.scala 124:26]
    io.Debug.Debug_mmu_wen <= CoreId.io.Debug_mmu_wen @[Core_top.scala 125:26]
    io.Debug.Debug_mmu_op <= CoreId.io.Debug_mmu_op @[Core_top.scala 126:26]
    io.Debug.Debug_mmu_RData2 <= CoreId.io.Debug_mmu_RData2 @[Core_top.scala 127:26]
    io.Debug.Debug_pcu_en <= CoreId.io.Debug_pcu_en @[Core_top.scala 128:26]
    io.Debug.Debug_pcu_op <= CoreId.io.Debug_pcu_op @[Core_top.scala 129:26]
    io.Debug.Debug_pcu_data1 <= CoreId.io.Debug_pcu_data1 @[Core_top.scala 130:26]
    io.Debug.Debug_pcu_data2 <= CoreId.io.Debug_pcu_data2 @[Core_top.scala 131:26]
    io.Debug.Debug_rd_r <= CoreId.io.Debug_rd_r @[Core_top.scala 132:26]
    io.Debug.Debug_csr_en <= CoreId.io.Debug_csr_en @[Core_top.scala 133:26]
    io.Debug.Debug_csr_op <= CoreId.io.Debug_csr_op @[Core_top.scala 134:26]
    io.Debug.Debug_csr_waddr <= CoreId.io.Debug_csr_waddr @[Core_top.scala 135:26]
    io.Debug.Debug_csr_data <= CoreId.io.Debug_csr_data @[Core_top.scala 136:26]
    io.Debug.Debug_csr_imm <= CoreId.io.Debug_csr_imm @[Core_top.scala 137:26]
    io.Debug.Debug_IdValid <= CoreId.io.Debug_IdValid @[Core_top.scala 138:26]
    io.Debug.DebugResult <= CoreExe.io.DebugResult @[Core_top.scala 141:28]
    io.Debug.DebugRd_r <= CoreExe.io.DebugRd_r @[Core_top.scala 142:28]
    io.Debug.DebugDataEn <= CoreExe.io.DebugDataEn @[Core_top.scala 143:28]
    io.Debug.DebugDataWen <= CoreExe.io.DebugDataWen @[Core_top.scala 144:28]
    io.Debug.DebugDataWdata <= CoreExe.io.DebugDataWdata @[Core_top.scala 145:28]
    io.Debug.DebugDataSize <= CoreExe.io.DebugDataSize @[Core_top.scala 146:28]
    io.Debug.DebugDataMemValid <= CoreExe.io.DebugDataMemValid @[Core_top.scala 147:28]
    io.Debug.DebugLoadOp <= CoreExe.io.DebugLoadOp @[Core_top.scala 148:28]
    io.Debug.DebugPcJump <= CoreExe.io.DebugPcJump @[Core_top.scala 149:28]
    io.Debug.DebugNextPc <= CoreExe.io.DebugNextPc @[Core_top.scala 150:28]
    io.Debug.DebugCsrWAddr <= CoreExe.io.DebugCsrWAddr @[Core_top.scala 151:28]
    io.Debug.DebugCsrWData <= CoreExe.io.DebugCsrWData @[Core_top.scala 152:28]
    io.Debug.DebugExeValid <= CoreExe.io.DebugExeValid @[Core_top.scala 153:28]
    io.Debug.DebugWData <= CoreMem.io.DebugWData @[Core_top.scala 155:28]
    io.Debug.DebugMemRd_r <= CoreMem.io.DebugRd_r @[Core_top.scala 156:31]

  module AxiMasterAxi :
    input clock : Clock
    input reset : Reset
    output io : { flip Cpu : { ExeData : { data_sram_en : UInt<1>, data_sram_wen : UInt<1>, data_sram_addr : UInt<32>, data_sram_wdata : UInt<32>, data_size : UInt<2>}, DataMem : { flip data_sram_rdata : UInt<32>, flip data_ok : UInt<1>, flip data_addr_ok : UInt<1>}}, AR : { ArId : UInt<4>, ArAddr : UInt<32>, ArLen : UInt<8>, Arsize : UInt<2>, ArBurst : UInt<2>, ArLock : UInt<2>, ArCache : UInt<4>, ArProt : UInt<3>, ArValid : UInt<1>, flip ArReady : UInt<1>}, R : { flip RId : UInt<4>, flip RData : UInt<32>, flip Rresp : UInt<2>, flip RLast : UInt<1>, flip RValid : UInt<1>, Rready : UInt<1>}, AW : { AwId : UInt<4>, AwAddr : UInt<32>, AwLen : UInt<8>, Awize : UInt<3>, AwBurst : UInt<2>, AwLock : UInt<2>, AwCache : UInt<4>, AwProt : UInt<3>, AwValid : UInt<1>, flip AwReady : UInt<1>}, W : { WId : UInt<4>, WData : UInt<32>, Wresp : UInt<2>, WLast : UInt<1>, WValid : UInt<1>, flip Wready : UInt<1>}, B : { flip Bid : UInt<4>, flip Bresp : UInt<2>, flip Bvalid : UInt<1>, Bready : UInt<1>}, DeBugAddrOk : UInt<1>, DeBugDataOk : UInt<1>, DeBugRData : UInt<32>}

    reg RegState : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[SramAxi.scala 101:26]
    reg ArAddr : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[SramAxi.scala 102:26]
    reg Arsize : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[SramAxi.scala 103:26]
    reg ArValid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[SramAxi.scala 104:26]
    reg AwAddr : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[SramAxi.scala 106:26]
    reg Awsize : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[SramAxi.scala 107:27]
    reg AwValid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[SramAxi.scala 108:26]
    reg WData : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[SramAxi.scala 110:26]
    reg WLast : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[SramAxi.scala 111:26]
    reg WValid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[SramAxi.scala 112:26]
    reg AddrOk : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[SramAxi.scala 114:26]
    reg DataOk : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[SramAxi.scala 115:26]
    reg RData : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[SramAxi.scala 116:26]
    node _T = eq(UInt<3>("h0"), RegState) @[SramAxi.scala 119:19]
    when _T : @[SramAxi.scala 119:19]
      DataOk <= UInt<1>("h0") @[SramAxi.scala 121:14]
      AddrOk <= UInt<1>("h0") @[SramAxi.scala 122:14]
      WData <= UInt<32>("h0") @[SramAxi.scala 123:14]
      WLast <= UInt<1>("h0") @[SramAxi.scala 124:14]
      WValid <= UInt<1>("h0") @[SramAxi.scala 125:14]
      node _T_1 = and(io.Cpu.ExeData.data_sram_en, io.Cpu.ExeData.data_sram_wen) @[SramAxi.scala 126:20]
      when _T_1 : @[SramAxi.scala 126:34]
        RegState <= UInt<3>("h1") @[SramAxi.scala 127:18]
        AwAddr <= io.Cpu.ExeData.data_sram_addr @[SramAxi.scala 128:18]
        Awsize <= io.Cpu.ExeData.data_size @[SramAxi.scala 129:19]
        AwValid <= UInt<1>("h1") @[SramAxi.scala 130:18]
        ArAddr <= UInt<32>("h0") @[SramAxi.scala 131:18]
        Arsize <= UInt<2>("h0") @[SramAxi.scala 132:18]
        ArValid <= UInt<1>("h0") @[SramAxi.scala 133:18]
      else :
        node _T_2 = eq(io.Cpu.ExeData.data_sram_wen, UInt<1>("h0")) @[SramAxi.scala 135:29]
        node _T_3 = and(io.Cpu.ExeData.data_sram_en, _T_2) @[SramAxi.scala 135:26]
        when _T_3 : @[SramAxi.scala 135:41]
          RegState <= UInt<3>("h4") @[SramAxi.scala 136:18]
          ArAddr <= io.Cpu.ExeData.data_sram_addr @[SramAxi.scala 137:18]
          Arsize <= io.Cpu.ExeData.data_size @[SramAxi.scala 138:18]
          ArValid <= UInt<1>("h1") @[SramAxi.scala 139:18]
          AwAddr <= UInt<32>("h0") @[SramAxi.scala 140:18]
          Awsize <= UInt<2>("h0") @[SramAxi.scala 141:18]
          AwValid <= UInt<1>("h0") @[SramAxi.scala 142:18]
        else :
          RegState <= UInt<3>("h0") @[SramAxi.scala 145:18]
          AwAddr <= UInt<32>("h0") @[SramAxi.scala 146:18]
          Awsize <= UInt<2>("h0") @[SramAxi.scala 147:18]
          AwValid <= UInt<1>("h0") @[SramAxi.scala 148:18]
          ArAddr <= UInt<32>("h0") @[SramAxi.scala 149:18]
          Arsize <= UInt<2>("h0") @[SramAxi.scala 150:18]
          ArValid <= UInt<1>("h0") @[SramAxi.scala 151:18]
    else :
      node _T_4 = eq(UInt<3>("h1"), RegState) @[SramAxi.scala 119:19]
      when _T_4 : @[SramAxi.scala 119:19]
        when io.B.Bvalid : @[SramAxi.scala 160:17]
          RegState <= UInt<3>("h2") @[SramAxi.scala 161:16]
          AwAddr <= UInt<32>("h0") @[SramAxi.scala 162:16]
          Awsize <= UInt<2>("h0") @[SramAxi.scala 163:16]
          AwValid <= UInt<1>("h0") @[SramAxi.scala 164:16]
        else :
          RegState <= UInt<3>("h1") @[SramAxi.scala 168:16]
      else :
        node _T_5 = eq(UInt<3>("h2"), RegState) @[SramAxi.scala 119:19]
        when _T_5 : @[SramAxi.scala 119:19]
          AddrOk <= UInt<1>("h1") @[SramAxi.scala 176:15]
          WData <= io.Cpu.ExeData.data_sram_wdata @[SramAxi.scala 177:15]
          WLast <= UInt<1>("h1") @[SramAxi.scala 178:15]
          WValid <= UInt<1>("h1") @[SramAxi.scala 179:15]
          RegState <= UInt<3>("h0") @[SramAxi.scala 180:15]
        else :
          node _T_6 = eq(UInt<3>("h4"), RegState) @[SramAxi.scala 119:19]
          when _T_6 : @[SramAxi.scala 119:19]
            when io.R.RLast : @[SramAxi.scala 185:18]
              RegState <= UInt<3>("h0") @[SramAxi.scala 186:18]
            when io.R.RValid : @[SramAxi.scala 188:19]
              DataOk <= UInt<1>("h1") @[SramAxi.scala 189:16]
              RData <= io.R.RData @[SramAxi.scala 190:16]
            else :
              DataOk <= UInt<1>("h0") @[SramAxi.scala 192:16]
              RData <= UInt<32>("h0") @[SramAxi.scala 193:16]
    io.AR.ArId <= UInt<4>("h1") @[SramAxi.scala 201:16]
    io.AR.ArAddr <= ArAddr @[SramAxi.scala 202:16]
    io.AR.ArLen <= UInt<8>("h0") @[SramAxi.scala 203:16]
    io.AR.Arsize <= Arsize @[SramAxi.scala 204:16]
    io.AR.ArBurst <= UInt<2>("h1") @[SramAxi.scala 205:16]
    io.AR.ArLock <= UInt<2>("h0") @[SramAxi.scala 206:16]
    io.AR.ArCache <= UInt<4>("h0") @[SramAxi.scala 207:16]
    io.AR.ArProt <= UInt<3>("h0") @[SramAxi.scala 208:16]
    io.AR.ArValid <= ArValid @[SramAxi.scala 209:16]
    io.AW.AwId <= UInt<4>("h1") @[SramAxi.scala 211:16]
    io.AW.AwAddr <= AwAddr @[SramAxi.scala 212:16]
    io.AW.AwLen <= UInt<8>("h0") @[SramAxi.scala 213:16]
    io.AW.Awize <= Awsize @[SramAxi.scala 214:16]
    io.AW.AwBurst <= UInt<2>("h1") @[SramAxi.scala 215:16]
    io.AW.AwLock <= UInt<2>("h0") @[SramAxi.scala 216:16]
    io.AW.AwCache <= UInt<4>("h0") @[SramAxi.scala 217:16]
    io.AW.AwProt <= UInt<3>("h0") @[SramAxi.scala 218:16]
    io.AW.AwValid <= AwValid @[SramAxi.scala 219:16]
    io.W.WId <= UInt<4>("h1") @[SramAxi.scala 221:16]
    io.W.WData <= WData @[SramAxi.scala 222:16]
    io.W.Wresp <= UInt<2>("h0") @[SramAxi.scala 223:16]
    io.W.WLast <= WLast @[SramAxi.scala 224:16]
    io.W.WValid <= WValid @[SramAxi.scala 225:16]
    io.R.Rready <= UInt<1>("h1") @[SramAxi.scala 227:16]
    io.B.Bready <= UInt<1>("h1") @[SramAxi.scala 228:16]
    io.Cpu.DataMem.data_addr_ok <= AddrOk @[SramAxi.scala 230:33]
    io.Cpu.DataMem.data_ok <= DataOk @[SramAxi.scala 231:33]
    io.Cpu.DataMem.data_sram_rdata <= RData @[SramAxi.scala 232:33]
    io.DeBugAddrOk <= AddrOk @[SramAxi.scala 233:16]
    io.DeBugDataOk <= DataOk @[SramAxi.scala 234:16]
    io.DeBugRData <= RData @[SramAxi.scala 235:16]

  module DataMemSlave :
    input clock : Clock
    input reset : Reset
    output io : { MemData : { data_sram_en : UInt<1>, data_sram_wen : UInt<4>, data_sram_addr : UInt<32>, data_sram_wdata : UInt<32>, flip data_sram_rdata : UInt<32>}, flip AR : { ArId : UInt<4>, ArAddr : UInt<32>, ArLen : UInt<8>, Arsize : UInt<2>, ArBurst : UInt<2>, ArLock : UInt<2>, ArCache : UInt<4>, ArProt : UInt<3>, ArValid : UInt<1>, flip ArReady : UInt<1>}, flip R : { flip RId : UInt<4>, flip RData : UInt<32>, flip Rresp : UInt<2>, flip RLast : UInt<1>, flip RValid : UInt<1>, Rready : UInt<1>}, flip AW : { AwId : UInt<4>, AwAddr : UInt<32>, AwLen : UInt<8>, Awize : UInt<3>, AwBurst : UInt<2>, AwLock : UInt<2>, AwCache : UInt<4>, AwProt : UInt<3>, AwValid : UInt<1>, flip AwReady : UInt<1>}, flip W : { WId : UInt<4>, WData : UInt<32>, Wresp : UInt<2>, WLast : UInt<1>, WValid : UInt<1>, flip Wready : UInt<1>}, flip B : { flip Bid : UInt<4>, flip Bresp : UInt<2>, flip Bvalid : UInt<1>, Bready : UInt<1>}}

    reg RegState : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[AxiMem.scala 63:26]
    reg DataEn : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AxiMem.scala 64:26]
    reg DataWen : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[AxiMem.scala 65:26]
    reg DataAddr : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AxiMem.scala 66:26]
    reg MemWData : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AxiMem.scala 67:26]
    reg RValid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AxiMem.scala 69:26]
    reg RLast : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AxiMem.scala 70:26]
    reg Bvalid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AxiMem.scala 71:26]
    reg AxiRData : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AxiMem.scala 72:26]
    node _T = eq(UInt<2>("h0"), RegState) @[AxiMem.scala 75:19]
    when _T : @[AxiMem.scala 75:19]
      RLast <= UInt<1>("h0") @[AxiMem.scala 77:14]
      RValid <= UInt<1>("h0") @[AxiMem.scala 78:14]
      when io.AW.AwValid : @[AxiMem.scala 79:18]
        RegState <= UInt<2>("h1") @[AxiMem.scala 80:18]
        node _DataWen_T = eq(io.AW.Awize, UInt<1>("h0")) @[AxiMem.scala 81:32]
        node _DataWen_T_1 = eq(io.AW.Awize, UInt<1>("h1")) @[AxiMem.scala 82:32]
        node _DataWen_T_2 = eq(io.AW.Awize, UInt<2>("h3")) @[AxiMem.scala 83:32]
        node _DataWen_T_3 = mux(_DataWen_T_2, UInt<4>("hf"), UInt<1>("h0")) @[AxiMem.scala 83:24]
        node _DataWen_T_4 = mux(_DataWen_T_1, UInt<2>("h3"), _DataWen_T_3) @[AxiMem.scala 82:24]
        node _DataWen_T_5 = mux(_DataWen_T, UInt<1>("h1"), _DataWen_T_4) @[AxiMem.scala 81:24]
        DataWen <= _DataWen_T_5 @[AxiMem.scala 81:18]
        DataEn <= UInt<1>("h0") @[AxiMem.scala 85:18]
        DataAddr <= io.AW.AwAddr @[AxiMem.scala 86:18]
      else :
        when io.AR.ArValid : @[AxiMem.scala 88:24]
          RegState <= UInt<2>("h3") @[AxiMem.scala 89:18]
          DataWen <= UInt<1>("h0") @[AxiMem.scala 90:18]
          DataAddr <= io.AR.ArAddr @[AxiMem.scala 91:18]
          DataEn <= UInt<1>("h1") @[AxiMem.scala 92:18]
        else :
          DataEn <= UInt<1>("h0") @[AxiMem.scala 94:18]
          RegState <= UInt<2>("h0") @[AxiMem.scala 95:18]
          DataWen <= UInt<1>("h0") @[AxiMem.scala 96:18]
          DataAddr <= UInt<32>("h0") @[AxiMem.scala 97:18]
    else :
      node _T_1 = eq(UInt<2>("h1"), RegState) @[AxiMem.scala 75:19]
      when _T_1 : @[AxiMem.scala 75:19]
        when io.B.Bready : @[AxiMem.scala 104:19]
          RegState <= UInt<2>("h2") @[AxiMem.scala 105:17]
          Bvalid <= UInt<1>("h1") @[AxiMem.scala 106:17]
      else :
        node _T_2 = eq(UInt<2>("h2"), RegState) @[AxiMem.scala 75:19]
        when _T_2 : @[AxiMem.scala 75:19]
          Bvalid <= UInt<1>("h0") @[AxiMem.scala 111:14]
          when io.W.WLast : @[AxiMem.scala 112:16]
            RegState <= UInt<2>("h0") @[AxiMem.scala 113:16]
          when io.W.WValid : @[AxiMem.scala 116:17]
            DataEn <= UInt<1>("h1") @[AxiMem.scala 118:16]
            DataWen <= DataWen @[AxiMem.scala 119:16]
            DataAddr <= DataAddr @[AxiMem.scala 120:16]
            MemWData <= io.W.WData @[AxiMem.scala 121:16]
          else :
            DataEn <= UInt<1>("h0") @[AxiMem.scala 124:16]
            DataWen <= DataWen @[AxiMem.scala 125:16]
            DataAddr <= DataAddr @[AxiMem.scala 126:16]
        else :
          node _T_3 = eq(UInt<2>("h3"), RegState) @[AxiMem.scala 75:19]
          when _T_3 : @[AxiMem.scala 75:19]
            RValid <= UInt<1>("h1") @[AxiMem.scala 132:14]
            AxiRData <= io.MemData.data_sram_rdata @[AxiMem.scala 133:14]
            RegState <= UInt<2>("h0") @[AxiMem.scala 134:14]
            RLast <= UInt<1>("h1") @[AxiMem.scala 135:14]
    io.R.RId <= UInt<4>("h1") @[AxiMem.scala 141:15]
    io.R.Rresp <= UInt<2>("h0") @[AxiMem.scala 142:15]
    io.R.RLast <= RLast @[AxiMem.scala 143:15]
    io.R.RData <= AxiRData @[AxiMem.scala 144:15]
    io.R.RValid <= RValid @[AxiMem.scala 145:15]
    io.B.Bid <= UInt<4>("h1") @[AxiMem.scala 146:15]
    io.B.Bresp <= UInt<2>("h0") @[AxiMem.scala 147:15]
    io.B.Bvalid <= Bvalid @[AxiMem.scala 148:15]
    node _io_AR_ArReady_T = eq(RegState, UInt<2>("h0")) @[AxiMem.scala 149:27]
    io.AR.ArReady <= _io_AR_ArReady_T @[AxiMem.scala 149:15]
    node _io_AW_AwReady_T = eq(RegState, UInt<2>("h0")) @[AxiMem.scala 150:27]
    io.AW.AwReady <= _io_AW_AwReady_T @[AxiMem.scala 150:15]
    node _io_W_Wready_T = eq(RegState, UInt<2>("h2")) @[AxiMem.scala 151:27]
    io.W.Wready <= _io_W_Wready_T @[AxiMem.scala 151:15]
    io.MemData.data_sram_en <= DataEn @[AxiMem.scala 153:29]
    io.MemData.data_sram_wen <= DataWen @[AxiMem.scala 154:29]
    io.MemData.data_sram_addr <= DataAddr @[AxiMem.scala 155:29]
    io.MemData.data_sram_wdata <= MemWData @[AxiMem.scala 156:29]

  module SocTop :
    input clock : Clock
    input reset : UInt<1>
    output io : { Instr : { PreIfInstr : { inst_sram_en : UInt<1>, inst_sram_wen : UInt<4>, inst_sram_addr : UInt<32>, inst_sram_wdata : UInt<32>}, InstrIf : { flip inst_sram_rdata : UInt<32>}}, MemData : { data_sram_en : UInt<1>, data_sram_wen : UInt<4>, data_sram_addr : UInt<32>, data_sram_wdata : UInt<32>, flip data_sram_rdata : UInt<32>}, Debug : { DebugInstr : UInt<32>, DebugPc : UInt<32>, DebugIfValid : UInt<1>, DebugIfEn : UInt<1>, Debug_alu_op : UInt<10>, Debug_data1 : UInt<32>, Debug_data2 : UInt<32>, Debug_mmu_en : UInt<1>, Debug_mmu_wen : UInt<1>, Debug_mmu_op : UInt<5>, Debug_mmu_RData2 : UInt<32>, Debug_pcu_en : UInt<1>, Debug_pcu_op : UInt<8>, Debug_pcu_data1 : UInt<32>, Debug_pcu_data2 : UInt<32>, Debug_rd_r : UInt<5>, Debug_csr_en : UInt<1>, Debug_csr_op : UInt<3>, Debug_csr_waddr : UInt<12>, Debug_csr_data : UInt<32>, Debug_csr_imm : UInt<32>, Debug_IdValid : UInt<1>, DebugResult : UInt<32>, DebugRd_r : UInt<5>, DebugDataEn : UInt<1>, DebugDataWen : UInt<1>, DebugDataWdata : UInt<32>, DebugDataSize : UInt<2>, DebugDataMemValid : UInt<1>, DebugLoadOp : UInt<5>, DebugPcJump : UInt<1>, DebugNextPc : UInt<32>, DebugCsrWAddr : UInt<12>, DebugCsrWData : UInt<32>, DebugExeValid : UInt<1>, DebugWData : UInt<32>, DebugMemRd_r : UInt<5>}, DeBugAddrOk : UInt<1>, DeBugDataOk : UInt<1>, DeBugRData : UInt<32>}

    inst Cpu of CoreTop @[SocTop.scala 15:29]
    Cpu.clock <= clock
    Cpu.reset <= reset
    inst SramAxi of AxiMasterAxi @[SocTop.scala 16:29]
    SramAxi.clock <= clock
    SramAxi.reset <= reset
    inst DataMemSlave of DataMemSlave @[SocTop.scala 17:29]
    DataMemSlave.clock <= clock
    DataMemSlave.reset <= reset
    SramAxi.io.Cpu <= Cpu.io.Axi @[SocTop.scala 19:15]
    DataMemSlave.io.AR <= SramAxi.io.AR @[SocTop.scala 21:18]
    DataMemSlave.io.AW <= SramAxi.io.AW @[SocTop.scala 22:18]
    DataMemSlave.io.R <= SramAxi.io.R @[SocTop.scala 23:18]
    DataMemSlave.io.W <= SramAxi.io.W @[SocTop.scala 24:18]
    DataMemSlave.io.B <= SramAxi.io.B @[SocTop.scala 25:18]
    io.Instr.PreIfInstr.inst_sram_en <= Cpu.io.Instr.PreIfInstr.inst_sram_en @[SocTop.scala 27:43]
    io.Instr.PreIfInstr.inst_sram_wen <= Cpu.io.Instr.PreIfInstr.inst_sram_wen @[SocTop.scala 28:43]
    io.Instr.PreIfInstr.inst_sram_addr <= Cpu.io.Instr.PreIfInstr.inst_sram_addr @[SocTop.scala 29:43]
    io.Instr.PreIfInstr.inst_sram_wdata <= Cpu.io.Instr.PreIfInstr.inst_sram_wdata @[SocTop.scala 30:43]
    Cpu.io.Instr.InstrIf.inst_sram_rdata <= io.Instr.InstrIf.inst_sram_rdata @[SocTop.scala 31:43]
    io.MemData.data_sram_en <= DataMemSlave.io.MemData.data_sram_en @[SocTop.scala 33:31]
    io.MemData.data_sram_wen <= DataMemSlave.io.MemData.data_sram_wen @[SocTop.scala 34:31]
    io.MemData.data_sram_addr <= DataMemSlave.io.MemData.data_sram_addr @[SocTop.scala 35:31]
    io.MemData.data_sram_wdata <= DataMemSlave.io.MemData.data_sram_wdata @[SocTop.scala 36:31]
    DataMemSlave.io.MemData.data_sram_rdata <= io.MemData.data_sram_rdata @[SocTop.scala 37:45]
    io.Debug.DebugInstr <= Cpu.io.Debug.DebugInstr @[SocTop.scala 40:26]
    io.Debug.DebugPc <= Cpu.io.Debug.DebugPc @[SocTop.scala 41:26]
    io.Debug.DebugIfValid <= Cpu.io.Debug.DebugIfValid @[SocTop.scala 42:26]
    io.Debug.DebugIfEn <= Cpu.io.Debug.DebugIfEn @[SocTop.scala 43:26]
    io.Debug.Debug_alu_op <= Cpu.io.Debug.Debug_alu_op @[SocTop.scala 45:26]
    io.Debug.Debug_data1 <= Cpu.io.Debug.Debug_data1 @[SocTop.scala 46:26]
    io.Debug.Debug_data2 <= Cpu.io.Debug.Debug_data2 @[SocTop.scala 47:26]
    io.Debug.Debug_mmu_en <= Cpu.io.Debug.Debug_mmu_en @[SocTop.scala 48:26]
    io.Debug.Debug_mmu_wen <= Cpu.io.Debug.Debug_mmu_wen @[SocTop.scala 49:26]
    io.Debug.Debug_mmu_op <= Cpu.io.Debug.Debug_mmu_op @[SocTop.scala 50:26]
    io.Debug.Debug_mmu_RData2 <= Cpu.io.Debug.Debug_mmu_RData2 @[SocTop.scala 51:26]
    io.Debug.Debug_pcu_en <= Cpu.io.Debug.Debug_pcu_en @[SocTop.scala 52:26]
    io.Debug.Debug_pcu_op <= Cpu.io.Debug.Debug_pcu_op @[SocTop.scala 53:26]
    io.Debug.Debug_pcu_data1 <= Cpu.io.Debug.Debug_pcu_data1 @[SocTop.scala 54:26]
    io.Debug.Debug_pcu_data2 <= Cpu.io.Debug.Debug_pcu_data2 @[SocTop.scala 55:26]
    io.Debug.Debug_rd_r <= Cpu.io.Debug.Debug_rd_r @[SocTop.scala 56:26]
    io.Debug.Debug_csr_en <= Cpu.io.Debug.Debug_csr_en @[SocTop.scala 57:26]
    io.Debug.Debug_csr_op <= Cpu.io.Debug.Debug_csr_op @[SocTop.scala 58:26]
    io.Debug.Debug_csr_waddr <= Cpu.io.Debug.Debug_csr_waddr @[SocTop.scala 59:26]
    io.Debug.Debug_csr_data <= Cpu.io.Debug.Debug_csr_data @[SocTop.scala 60:26]
    io.Debug.Debug_csr_imm <= Cpu.io.Debug.Debug_csr_imm @[SocTop.scala 61:26]
    io.Debug.Debug_IdValid <= Cpu.io.Debug.Debug_IdValid @[SocTop.scala 62:26]
    io.Debug.DebugResult <= Cpu.io.Debug.DebugResult @[SocTop.scala 65:28]
    io.Debug.DebugRd_r <= Cpu.io.Debug.DebugRd_r @[SocTop.scala 66:28]
    io.Debug.DebugDataEn <= Cpu.io.Debug.DebugDataEn @[SocTop.scala 67:28]
    io.Debug.DebugDataWen <= Cpu.io.Debug.DebugDataWen @[SocTop.scala 68:28]
    io.Debug.DebugDataWdata <= Cpu.io.Debug.DebugDataWdata @[SocTop.scala 69:28]
    io.Debug.DebugDataSize <= Cpu.io.Debug.DebugDataSize @[SocTop.scala 70:28]
    io.Debug.DebugDataMemValid <= Cpu.io.Debug.DebugDataMemValid @[SocTop.scala 71:28]
    io.Debug.DebugLoadOp <= Cpu.io.Debug.DebugLoadOp @[SocTop.scala 72:28]
    io.Debug.DebugPcJump <= Cpu.io.Debug.DebugPcJump @[SocTop.scala 73:28]
    io.Debug.DebugNextPc <= Cpu.io.Debug.DebugNextPc @[SocTop.scala 74:28]
    io.Debug.DebugCsrWAddr <= Cpu.io.Debug.DebugCsrWAddr @[SocTop.scala 75:28]
    io.Debug.DebugCsrWData <= Cpu.io.Debug.DebugCsrWData @[SocTop.scala 76:28]
    io.Debug.DebugExeValid <= Cpu.io.Debug.DebugExeValid @[SocTop.scala 77:28]
    io.Debug.DebugWData <= Cpu.io.Debug.DebugWData @[SocTop.scala 79:28]
    io.Debug.DebugMemRd_r <= Cpu.io.Debug.DebugMemRd_r @[SocTop.scala 80:28]
    io.DeBugAddrOk <= SramAxi.io.DeBugAddrOk @[SocTop.scala 82:16]
    io.DeBugDataOk <= SramAxi.io.DeBugDataOk @[SocTop.scala 83:16]
    io.DeBugRData <= SramAxi.io.DeBugRData @[SocTop.scala 84:16]

